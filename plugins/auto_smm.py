from __future__ import annotations
from typing import TYPE_CHECKING, Dict, List, Tuple, Optional, Any, Union
if TYPE_CHECKING:
    from cardinal import Cardinal

from urllib.parse import quote
import re
import os
import json
import logging
import threading
import requests
import shutil
import time
import uuid
import hashlib
from telebot import types
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
from datetime import datetime, timedelta
from FunPayAPI.updater.events import NewMessageEvent, NewOrderEvent

try:
    import pymysql
except ImportError:
    import sys
    import subprocess
    print("–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ pymysql –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º...")
    subprocess.check_call([sys.executable, "-m", "pip", "install", "pymysql"])
    import pymysql
    print("–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ pymysql —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!")

NAME = "SMM Manager"
VERSION = "1.2"
DESCRIPTION = "–ö–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ SMM —É—Å–ª—É–≥–∞–º–∏\n\n–° –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –º—É–ª—å—Ç–∏ —Å–µ—Ä–≤–∏—Å–æ–≤!"
CREDITS = "@KaDerix / @wormdcShop_bot"
UUID = "18db7862-7446-4f3f-b2dd-8fc3ec7f8b7e"
SETTINGS_PAGE = False

MAC_ID = hex(uuid.getnode()).replace('0x', '')
HASH_MAC = hashlib.sha256(MAC_ID.encode()).hexdigest()[17:32]

RUNNING = False
IS_STARTED = False
ORDER_CHECK_THREAD = None
AUTO_LOTS_SEND_THREAD = None
logger = logging.getLogger("auto_smm")

orders_info = {}
processed_users = {}
waiting_for_link: Dict[str, Dict] = {}
waiting_for_lots_upload = set()
CACHE_RUNNING = False

bot = None
cardinal_instance = None

CONFIG_PATH = os.path.join("storage", "cache", "auto_lots.json")
ORDERS_PATH = os.path.join("storage", "cache", "auto_smm_orders.json")
ORDERS_DATA_PATH = os.path.join("storage", "cache", "orders_data.json")
VALID_WEBSITES_PATH = os.path.join("storage", "cache", "valid_websites.json")
LOG_PATH = os.path.join("logs", "log.log")
os.makedirs(os.path.dirname(ORDERS_PATH), exist_ok=True)
os.makedirs(os.path.dirname(ORDERS_DATA_PATH), exist_ok=True)
os.makedirs(os.path.dirname(VALID_WEBSITES_PATH), exist_ok=True)

def load_valid_links() -> List[str]:
    if not os.path.exists(VALID_WEBSITES_PATH):
        return ["teletype.in", "t.me", "vk.com", "ok.ru", "youtube.com", "youtu.be"]
    try:
        with open(VALID_WEBSITES_PATH, 'r', encoding='utf-8') as f:
            return json.load(f)
    except:
        return ["teletype.in", "t.me", "vk.com", "ok.ru", "youtube.com", "youtu.be"]

def save_valid_links(links: List[str]):
    with open(VALID_WEBSITES_PATH, 'w', encoding='utf-8') as f:
        json.dump(links, f, ensure_ascii=False, indent=4)

def add_website(message: types.Message, new_site: str):
    valid_links = load_valid_links()
    if new_site in valid_links:
        bot.send_message(message.chat.id, f"‚ùå –°–∞–π—Ç {new_site} —É–∂–µ –≤ —Å–ø–∏—Å–∫–µ.")
        return
    valid_links.append(new_site)
    save_valid_links(valid_links)
    bot.send_message(message.chat.id, f"‚úÖ –°–∞–π—Ç {new_site} –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö.")

def load_config() -> Dict:
    logger.info("–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ (auto_lots.json)...")
    
    file_lock = threading.Lock()
    
    try:
        with file_lock:
            if os.path.exists(CONFIG_PATH):
                try:
                    with open(CONFIG_PATH, 'r', encoding='utf-8') as f:
                        file_content = f.read()
                        
                    if not file_content.strip():
                        logger.error(f"–§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ {CONFIG_PATH} –ø—É—Å—Ç. –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.")
                        cfg = create_default_config()
                        save_config(cfg)
                        return cfg
                        
                    try:
                        cfg = json.loads(file_content)
                    except json.JSONDecodeError as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ JSON: {e}. –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.")
                        cfg = create_default_config()
                        save_config(cfg)
                        return cfg
                    
                    if "services" not in cfg:
                        cfg["services"] = {
                            "1": {
                                "api_url": "https://service1.com/api/v2",
                                "api_key": "SERVICE_1_KEY"
                            }
                        }
                    if "auto_refunds" not in cfg:
                        cfg["auto_refunds"] = True
                    if "confirm_link" not in cfg:
                        cfg["confirm_link"] = True
                    if "messages" not in cfg:
                        cfg["messages"] = {
                            "after_payment": "‚ù§Ô∏è –ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ –æ–ø–ª–∞—Ç—É!\n\n–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –Ω–∞–∫—Ä—É—Ç–∫—É, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∞—à—É —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏–ª–∏ –ø–æ—Å—Ç –≤ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç—è—Ö. –°—Å—ã–ª–∫–∞ –¥–æ–ª–∂–Ω–∞ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å \"https://\", –Ω–∞–ø—Ä–∏–º–µ—Ä:\n\n–ü—Ä–∏–º–µ—Ä: https://teletype.in/@exfador/wwTwed1ZBZE\n\n–ë–µ–∑ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏ –Ω–∞–∫—Ä—É—Ç–∫–∞ –Ω–µ –±—É–¥–µ—Ç –∑–∞–ø—É—â–µ–Ω–∞. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ–Ω–∞ –≤–µ–¥–µ—Ç –Ω–∞ –∞–∫—Ç–∏–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É, –¥–æ—Å—Ç—É–ø–Ω—É—é –¥–ª—è –æ–±—â–µ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞.",
                            "after_confirmation": "üéâ –í–∞—à –∑–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω!\n\nüî¢ ID –∑–∞–∫–∞–∑–∞ –≤ —Å–µ—Ä–≤–∏—Å–µ: {twiboost_id}\nüîó –î–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ: {link}\n\nüìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\nüîç —á–µ–∫ {twiboost_id} ‚Äî –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ (–≤—ã–≤–æ–¥–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ)\nüîÑ —Ä–µ—Ñ–∏–ª–ª {twiboost_id} ‚Äî –ó–∞–ø—Ä–æ—Å–∏—Ç—å —Ä–µ—Ñ–∏–ª–ª (—Ä–∞–±–æ—Ç–∞–µ—Ç –ª–∏—à—å —Å –≥–∞—Ä–∞–Ω—Ç–∏–µ–π - –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –æ—Ç–ø–∏—Å–∞–Ω–Ω—ã—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤)\n\n–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –≤–æ–ø—Ä–æ—Å—ã, –Ω–µ —Å—Ç–µ—Å–Ω—è–π—Ç–µ—Å—å –æ–±—Ä–∞—â–∞—Ç—å—Å—è!"
                        }
                    if "notification_chat_id" not in cfg:
                        cfg["notification_chat_id"] = None
                    if "send_auto_lots" not in cfg:
                        cfg["send_auto_lots"] = True
                    if "send_auto_lots_interval" not in cfg:
                        cfg["send_auto_lots_interval"] = 30
                    if "auto_start" not in cfg:
                        cfg["auto_start"] = True
                    if "lot_mapping" not in cfg:
                        cfg["lot_mapping"] = {}
                    if "new_order_notifications" not in cfg:
                        cfg["new_order_notifications"] = False
                    if "subcategory_ids" not in cfg:
                        cfg["subcategory_ids"] = []
                    return cfg
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}. –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.")
                    cfg = create_default_config()
                    save_config(cfg)
                    return cfg
            else:
                logger.info(f"–§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ {CONFIG_PATH} –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ñ–∞–π–ª.")
                cfg = create_default_config()
                save_config(cfg)
                return cfg
    except Exception as e:
        logger.error(f"–û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}. –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.")
        cfg = create_default_config()
        try:
            save_config(cfg)
        except:
            pass
        return cfg

def create_default_config() -> Dict:
    """–°–æ–∑–¥–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
    return {
        "services": {
            "1": {
                "api_url": "https://twiboost.com/api/v2",
                "api_key": "YOUR_API_KEY"
            }
        },
        "auto_refunds": True,
        "confirm_link": True,
        "messages": {
            "after_payment": "‚ù§Ô∏è –ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ –æ–ø–ª–∞—Ç—É!\n\n–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –Ω–∞–∫—Ä—É—Ç–∫—É, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∞—à—É —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏–ª–∏ –ø–æ—Å—Ç –≤ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç—è—Ö. –°—Å—ã–ª–∫–∞ –¥–æ–ª–∂–Ω–∞ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å \"https://\", –Ω–∞–ø—Ä–∏–º–µ—Ä:\n\n–ü—Ä–∏–º–µ—Ä: https://teletype.in/@exfador/wwTwed1ZBZE\n\n–ë–µ–∑ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏ –Ω–∞–∫—Ä—É—Ç–∫–∞ –Ω–µ –±—É–¥–µ—Ç –∑–∞–ø—É—â–µ–Ω–∞. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ–Ω–∞ –≤–µ–¥–µ—Ç –Ω–∞ –∞–∫—Ç–∏–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É, –¥–æ—Å—Ç—É–ø–Ω—É—é –¥–ª—è –æ–±—â–µ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞.",
            "after_confirmation": "üéâ –í–∞—à –∑–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω!\n\nüî¢ ID –∑–∞–∫–∞–∑–∞ –≤ —Å–µ—Ä–≤–∏—Å–µ: {twiboost_id}\nüîó –î–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ: {link}\n\nüìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\nüîç —á–µ–∫ {twiboost_id} ‚Äî –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ (–≤—ã–≤–æ–¥–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ)\nüîÑ —Ä–µ—Ñ–∏–ª–ª {twiboost_id} ‚Äî –ó–∞–ø—Ä–æ—Å–∏—Ç—å —Ä–µ—Ñ–∏–ª–ª (—Ä–∞–±–æ—Ç–∞–µ—Ç –ª–∏—à—å —Å –≥–∞—Ä–∞–Ω—Ç–∏–µ–π - –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –æ—Ç–ø–∏—Å–∞–Ω–Ω—ã—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤)\n\n–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –≤–æ–ø—Ä–æ—Å—ã, –Ω–µ —Å—Ç–µ—Å–Ω—è–π—Ç–µ—Å—å –æ–±—Ä–∞—â–∞—Ç—å—Å—è!"
        },
        "notification_chat_id": None,
        "send_auto_lots": True,
        "send_auto_lots_interval": 30,
        "auto_start": True,
        "lot_mapping": {},
        "new_order_notifications": False,
        "subcategory_ids": []
    }

def save_config(cfg: Dict):
    logger.info("–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ (auto_lots.json)...")
    os.makedirs(os.path.dirname(CONFIG_PATH), exist_ok=True)
    with open(CONFIG_PATH, 'w', encoding='utf-8') as f:
        json.dump(cfg, f, ensure_ascii=False, indent=4)
    logger.info("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.")

def reindex_lots(cfg: Dict):
    lot_map = cfg.get("lot_mapping", {})
    sorted_lots = sorted(
        lot_map.items(),
        key=lambda x: int(x[0].split('_')[1]) if x[0].startswith('lot_') and x[0].split('_')[1].isdigit() else 0
    )
    new_lot_map = {}
    for idx, (lot_key, lot_data) in enumerate(sorted_lots, start=1):
        new_key = f"lot_{idx}"
        new_lot_map[new_key] = lot_data
    cfg["lot_mapping"] = new_lot_map
    save_config(cfg)
    logger.info("–õ–æ—Ç—ã –±—ã–ª–∏ –ø–µ—Ä–µ–∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω—ã –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è.")

def load_orders_data() -> List[Dict]:
    if not os.path.exists(ORDERS_DATA_PATH):
        return []
    try:
        with open(ORDERS_DATA_PATH, 'r', encoding='utf-8') as f:
            return json.load(f)
    except json.JSONDecodeError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ orders_data.json: {e}")
        backup_path = f"{ORDERS_DATA_PATH}.bak.{int(time.time())}"
        try:
            shutil.copy2(ORDERS_DATA_PATH, backup_path)
            logger.info(f"–°–æ–∑–¥–∞–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω–æ–≥–æ orders_data.json: {backup_path}")
        except Exception as ex:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é orders_data.json: {ex}")
        
        try:
            with open(ORDERS_DATA_PATH, 'r', encoding='utf-8') as f:
                content = f.read()
            last_bracket_pos = content.rstrip().rfind(']')
            if last_bracket_pos > 0:
                valid_content = content[:last_bracket_pos+1]
                json.loads(valid_content)
                with open(ORDERS_DATA_PATH, 'w', encoding='utf-8') as f:
                    f.write(valid_content)
                logger.info("–§–∞–π–ª orders_data.json —É—Å–ø–µ—à–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                return json.loads(valid_content)
        except Exception as ex:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å orders_data.json: {ex}")
        
        return []

def save_orders_data(orders: List[Dict]):
    temp_path = f"{ORDERS_DATA_PATH}.tmp"
    try:
        with open(temp_path, 'w', encoding='utf-8') as f:
            json.dump(orders, f, indent=4, ensure_ascii=False)
        
        if os.path.exists(temp_path):
            if os.path.exists(ORDERS_DATA_PATH):
                os.remove(ORDERS_DATA_PATH)
            os.rename(temp_path, ORDERS_DATA_PATH)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ orders_data.json: {e}")
        if os.path.exists(temp_path):
            try:
                os.remove(temp_path)
            except:
                pass

def save_order_data(
    chat_id: int,
    order_id: str,
    twiboost_id: int,
    status: str,
    chistota: float,
    customer_url: str,
    quantity: int,
    service_number: int,
    is_refunded: bool = False
):
    data_ = {
        "chat_id": chat_id,
        "order_id": order_id,
        "id_zakaz": twiboost_id,
        "status": status,
        "chistota": chistota,
        "customer_url": customer_url,
        "quantity": quantity,
        "service_number": service_number,
        "is_refunded": is_refunded,
        "spent": 0.0,
        "summa": chistota,
        "currency": "RUB"
    }
    
    orders = load_orders_data()
    orders.append(data_)
    save_orders_data(orders)
    logger.info(f"–î–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞ #{order_id} (twiboost ID: {twiboost_id}) —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.")

def save_order_info(order_id: int, order_summa: float, service_name: str, order_chistota: float):
    file_lock = threading.Lock()
    
    data_ = {
        "date": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
        "order_id": order_id,
        "summa": order_summa,
        "service_name": service_name,
        "chistota": order_chistota,
        "completed_notification_sent": False
    }
    
    try:
        with file_lock:
            if not os.path.exists(ORDERS_PATH):
                with open(ORDERS_PATH, 'w', encoding='utf-8') as f:
                    json.dump([], f, indent=4, ensure_ascii=False)
            
            try:
                with open(ORDERS_PATH, 'r', encoding='utf-8') as f:
                    content = f.read()
                    if not content.strip():
                        orders = []
                    else:
                        orders = json.loads(content)
            except json.JSONDecodeError as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ {ORDERS_PATH}: {e}. –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ñ–∞–π–ª.")
                orders = []
            
            orders.append(data_)
            
            temp_path = f"{ORDERS_PATH}.tmp"
            try:
                with open(temp_path, 'w', encoding='utf-8') as f:
                    json.dump(orders, f, indent=4, ensure_ascii=False)
                
                if os.path.exists(temp_path):
                    if os.path.exists(ORDERS_PATH):
                        os.remove(ORDERS_PATH)
                    os.rename(temp_path, ORDERS_PATH)
                    logger.info(f"–î–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞ #{order_id} —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–∞ #{order_id}: {e}")
                if os.path.exists(temp_path):
                    try:
                        os.remove(temp_path)
                    except:
                        pass
    except Exception as e:
        logger.error(f"–û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–∫–∞–∑–µ #{order_id}: {e}")

def update_order_status(order_id_funpay: str, new_status: str):
    orders = load_orders_data()
    updated = False

    for order in orders:
        if str(order["order_id"]) == str(order_id_funpay):
            order["status"] = new_status
            updated = True
            logger.info(f"–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ #{order_id_funpay} –æ–±–Ω–æ–≤–ª—ë–Ω –Ω–∞ '{new_status}'.")
            break

    if updated:
        save_orders_data(orders)
    else:
        logger.warning(f"–ó–∞–∫–∞–∑ #{order_id_funpay} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ orders_data.json.")

def update_order_refunded_status(order_id_funpay: str):
    orders = load_orders_data()
    updated = False
    for order in orders:
        if str(order["order_id"]) == str(order_id_funpay):
            if not order.get("is_refunded", False):
                order["is_refunded"] = True
                updated = True
                logger.info(f"–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ #{order_id_funpay} –æ–±–Ω–æ–≤–ª—ë–Ω –Ω–∞ 'is_refunded': True.")
            break

    if updated:
        save_orders_data(orders)
    else:
        logger.warning(f"–ó–∞–∫–∞–∑ #{order_id_funpay} –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ 'is_refunded'.")

def refund_order(c: Cardinal, order_id_funpay: str, buyer_chat_id: int, reason: str, detailed_reason: str = None):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ —Å—Ä–µ–¥—Å—Ç–≤ —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –∏ –ø–æ–ª—É—á–∞—Ç–µ–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.
    """
    cfg = load_config()
    auto_refunds = cfg.get("auto_refunds", True)
    notification_chat_id = cfg.get("notification_chat_id")

    if detailed_reason is None:
        detailed_reason = reason

    orders = load_orders_data()
    order_data = next((o for o in orders if str(o["order_id"]) == str(order_id_funpay)), None)
    
    if order_data and order_data.get("is_refunded", False):
        logger.info(f"–ó–∞–∫–∞–∑ #{order_id_funpay} —É–∂–µ –±—ã–ª –≤–æ–∑–≤—Ä–∞—â–µ–Ω. –ü—Ä–æ–ø—É—Å–∫.")
        return

    order_url = f"https://funpay.com/orders/{order_id_funpay}/"

    if auto_refunds:
        try:
            c.account.refund(order_id_funpay)
            c.send_message(buyer_chat_id, f"‚ùå –í–∞—à–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –ø–æ –ø—Ä–∏—á–∏–Ω–µ: {reason}")
            if notification_chat_id:
                detailed_message = f"""
‚ö†Ô∏è –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –∑–∞–∫–∞–∑–∞ #{order_id_funpay}.
üî¢ –ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: {order_id_funpay}
üìù –ü—Ä–∏—á–∏–Ω–∞: {detailed_reason}
üîó –°—Å—ã–ª–∫–∞ –Ω–∞ –∑–∞–∫–∞–∑: {order_url}
                """.strip()
                bot.send_message(notification_chat_id, detailed_message)
            logger.info(f"–ó–∞–∫–∞–∑ #{order_id_funpay} –±—ã–ª –æ—Ç–º–µ–Ω—ë–Ω (refund) –¥–ª—è –ø–æ–∫—É–ø–∞—Ç–µ–ª—è {buyer_chat_id}. –ü—Ä–∏—á–∏–Ω–∞: {reason}")

            waiting_for_link.pop(str(order_id_funpay), None)
            update_order_refunded_status(order_id_funpay)
        except Exception as ex:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –≤–µ—Ä–Ω—É—Ç—å —Å—Ä–µ–¥—Å—Ç–≤–∞ –¥–ª—è –∑–∞–∫–∞–∑–∞ #{order_id_funpay}: {ex}")
            if notification_chat_id:
                detailed_message = f"""
‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º –≤–æ–∑–≤—Ä–∞—Ç–µ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –∑–∞–∫–∞–∑–∞ #{order_id_funpay}.
üî¢ –ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: {order_id_funpay}
üìù –ü—Ä–∏—á–∏–Ω–∞: {detailed_reason}
‚ùó –û—à–∏–±–∫–∞: {ex}
üîó –°—Å—ã–ª–∫–∞ –Ω–∞ –∑–∞–∫–∞–∑: {order_url}
                """.strip()
                bot.send_message(notification_chat_id, detailed_message)
    else:
        if notification_chat_id:
            detailed_message = f"""
‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç—Å—è —Ä—É—á–Ω–æ–π –≤–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –∑–∞–∫–∞–∑–∞ #{order_id_funpay}.
üî¢ –ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: {order_id_funpay}
üìù –ü—Ä–∏—á–∏–Ω–∞: {detailed_reason}
üîó –ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ, —á—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑: {order_url}
            """.strip()
            bot.send_message(notification_chat_id, detailed_message)
        else:
            logger.warning("Notification chat_id –Ω–µ –∑–∞–¥–∞–Ω –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤–æ–∑–≤—Ä–∞—Ç–µ.")

def update_order_charge_and_net(order_id_funpay: str, spent: float, currency: str = "USD", net_profit: float = None):
    orders_data = load_orders_data()
    found_od = False
    for order in orders_data:
        if str(order["order_id"]) == str(order_id_funpay):
            order["spent"] = spent
            order["currency"] = currency
            if net_profit is not None:
                order["chistota"] = net_profit
            else:
                net = order["summa"] - spent
                order["chistota"] = round(net, 2)
            found_od = True
            break

    if found_od:
        save_orders_data(orders_data)

    if os.path.exists(ORDERS_PATH):
        with open(ORDERS_PATH, 'r', encoding='utf-8') as f:
            orders_list = json.load(f)
        updated_a = False
        for o in orders_list:
            if str(o["order_id"]) == str(order_id_funpay):
                o["spent"] = spent
                o["currency"] = currency
                if net_profit is not None:
                    o["chistota"] = net_profit
                else:
                    net = o["summa"] - spent
                    o["chistota"] = round(net, 2)
                updated_a = True
                break

        if updated_a:
            with open(ORDERS_PATH, 'w', encoding='utf-8') as f:
                json.dump(orders_list, f, indent=4, ensure_ascii=False)

def check_order_status(
    c: Cardinal,
    twiboost_order_id: int,
    buyer_chat_id: int,
    link: str,
    order_id_funpay: str,
    attempt: int = 1
):
    """
    –ü–æ—Ç–æ–∫–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–º SMM-—Å–µ—Ä–≤–∏—Å–µ.
    """
    if not RUNNING:
        logger.info(f"–ü–ª–∞–≥–∏–Ω –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –ø—Ä–µ—Ä—ã–≤–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –∑–∞–∫–∞–∑–∞ #{twiboost_order_id}")
        return
        
    file_lock = threading.Lock()
    orders_info_data = []
    
    try:
        with file_lock:
            if os.path.exists(ORDERS_PATH):
                try:
                    with open(ORDERS_PATH, 'r', encoding='utf-8') as f:
                        file_content = f.read()
                        if not file_content.strip():
                            orders_info_data = []
                        else:
                            orders_info_data = json.loads(file_content)
                except (json.JSONDecodeError, Exception) as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ {ORDERS_PATH}: {e}")
                    orders_info_data = []
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ—Å—Ç—É–ø–µ –∫ —Ñ–∞–π–ª—É {ORDERS_PATH}: {e}")
        orders_info_data = []
    
    order_info = next((o for o in orders_info_data if str(o["order_id"]) == str(order_id_funpay)), None)
    if order_info and order_info.get("completed_notification_sent", False):
        logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –¥–ª—è –∑–∞–∫–∞–∑–∞ #{order_id_funpay} —É–∂–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É.")
        return
    
    try:
        orders = load_orders_data()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –æ –∑–∞–∫–∞–∑–∞—Ö: {e}")
        orders = []
    
    order_data = next((o for o in orders if str(o["order_id"]) == str(order_id_funpay)), None)
    if not order_data:
        logger.warning(f"–ó–∞–∫–∞–∑ {order_id_funpay} –Ω–µ –Ω–∞–π–¥–µ–Ω –ø—Ä–∏ check_order_status.")
        return

    service_number = order_data["service_number"]
    
    try:
        cfg = load_config()
        service_cfg = cfg["services"].get(str(service_number))
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        return
    
    if not service_cfg:
        logger.warning(f"–ù–µ –Ω–∞–π–¥–µ–Ω config.services[{service_number}] ‚Äî –ø—Ä–µ—Ä—ã–≤–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É.")
        return

    api_url = service_cfg["api_url"]
    api_key = service_cfg["api_key"]

    url_ = f"{api_url}?action=status&order={twiboost_order_id}&key={api_key}"
    logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞ #{twiboost_order_id}, –ø–æ–ø—ã—Ç–∫–∞ {attempt}...")

    completed_statuses = ["completed", "done", "success", "partial"]
    failed_statuses = ["failed", "error", "canceled"]

    try:
        response = requests.get(url_, timeout=10)
        logger.debug(f"–ó–∞–ø—Ä–æ—Å –∫ {url_} –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å {response.status_code}")
        if response.status_code == 200:
            data_ = response.json()
            status_ = data_.get("status", "Unknown")
            remains_ = data_.get("remains", "Unknown")
            charge_ = data_.get("charge", "0")
            currency_ = data_.get("currency", "USD")

            logger.info(f"–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–∏—Å–∞ #{twiboost_order_id}: {data_}")
            try:
                remains_ = int(remains_)
            except ValueError:
                remains_ = None
            try:
                spent_ = float(charge_)
            except ValueError:
                spent_ = 0.0

            status_lower = status_.lower()

            if status_lower in completed_statuses or (remains_ is not None and remains_ == 0):
                if order_info:
                    try:
                        with file_lock:
                            for o in orders_info_data:
                                if str(o["order_id"]) == str(order_id_funpay):
                                    o["completed_notification_sent"] = True
                                    break
                            with open(ORDERS_PATH, 'w', encoding='utf-8') as f:
                                json.dump(orders_info_data, f, indent=4, ensure_ascii=False)
                            logger.info(f"–£—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω —Å—Ç–∞—Ç—É—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –∑–∞–∫–∞–∑–∞ #{order_id_funpay}")
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –∑–∞–∫–∞–∑–∞ #{order_id_funpay}: {e}")

                order_link = f"https://funpay.com/orders/{order_id_funpay}/"
                message = (
                    f"üéâ –í–∞—à –∑–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à—ë–Ω!\n"
                    f"üî¢ –ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: {twiboost_order_id}\n"
                    f"üîó –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–∫–∞–∑: {order_link}"
                )
                c.send_message(buyer_chat_id, message)
                logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–∫—É–ø–∞—Ç–µ–ª—é {buyer_chat_id} (–∑–∞–∫–∞–∑ #{twiboost_order_id}).")
                update_order_status(order_id_funpay, "completed")
                return

            elif status_lower in failed_statuses:
                refund_order(
                    c,
                    order_id_funpay,
                    buyer_chat_id,
                    reason="–ó–∞–∫–∞–∑ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω.",
                    detailed_reason=f"–ó–∞–∫–∞–∑ –≤ —Å–µ—Ä–≤–∏—Å–µ –∏–º–µ–µ—Ç —Å—Ç–∞—Ç—É—Å '{status_}'."
                )
                update_order_status(order_id_funpay, "failed")
                return

            else:
                logger.info(f"–ó–∞–∫–∞–∑ #{twiboost_order_id} –≤ —Å—Ç–∞—Ç—É—Å–µ '{status_}' (–æ—Å—Ç–∞–ª–æ—Å—å: {remains_}).")
                delay = 300

        elif response.status_code == 429:
            logger.warning(f"–ü–æ–ª—É—á–µ–Ω —Å—Ç–∞—Ç—É—Å 429 (Too Many Requests) –¥–ª—è –∑–∞–∫–∞–∑–∞ #{twiboost_order_id}.")
            delay = 3600

        else:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∑–∞–∫–∞–∑–∞ #{twiboost_order_id}: {response.status_code}, {response.text}")
            delay = 300

    except requests.exceptions.RequestException as req_ex:
        logger.error(f"RequestException –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ #{twiboost_order_id}: {req_ex}")
        delay = min(300 * (2 ** (attempt - 1)), 3600)
    except Exception as ex:
        logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∑–∞–∫–∞–∑–∞ #{twiboost_order_id}: {ex}")
        delay = 300

    logger.info(f"–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–∫–∞–∑–∞ #{twiboost_order_id} —á–µ—Ä–µ–∑ {delay} —Å–µ–∫.")
    if RUNNING:  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º –Ω–æ–≤–æ–≥–æ —Ç–∞–π–º–µ—Ä–∞
        threading.Timer(
            delay,
            check_order_status,
            args=(c, twiboost_order_id, buyer_chat_id, link, order_id_funpay, attempt + 1)
        ).start()

def start_order_checking(c: Cardinal):
    if not RUNNING:  
        return
        
    try:
        all_data = load_orders_data()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –æ –∑–∞–∫–∞–∑–∞—Ö –≤ start_order_checking: {e}")
        all_data = []
    
    orders_info_data = []
    file_lock = threading.Lock()
    
    try:
        with file_lock:
            if os.path.exists(ORDERS_PATH):
                try:
                    with open(ORDERS_PATH, 'r', encoding='utf-8') as f:
                        file_content = f.read()
                        if not file_content.strip():
                            orders_info_data = []
                        else:
                            orders_info_data = json.loads(file_content)
                except (json.JSONDecodeError, Exception) as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ {ORDERS_PATH} –≤ start_order_checking: {e}")
                    orders_info_data = []
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ—Å—Ç—É–ø–µ –∫ —Ñ–∞–π–ª—É {ORDERS_PATH} –≤ start_order_checking: {e}")
        orders_info_data = []
    
    for od_ in all_data:
        try:
            if RUNNING and od_["status"].lower() != "completed" and not od_.get("is_refunded", False):
                order_info = next((o for o in orders_info_data if str(o["order_id"]) == str(od_["order_id"])), None)
                if order_info and order_info.get("completed_notification_sent", False):
                    logger.info(f"–ü—Ä–æ–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–∫–∞–∑–∞ #{od_['order_id']}, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
                    continue
                
                threading.Thread(
                    target=check_order_status,
                    args=(c, od_["id_zakaz"], od_["chat_id"], od_["customer_url"], od_["order_id"])
                ).start()
                time.sleep(0.5)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–∫–∞–∑–∞ –≤ start_order_checking: {e}")
            continue

def get_tg_id_by_description(description: str, order_amount: int) -> Tuple[int, int, int] | None:
    cfg = load_config()
    lot_map = cfg.get("lot_mapping", {})
    for lot_key, lot_data in lot_map.items():
        lot_name = lot_data["name"]
        if re.search(re.escape(lot_name), description, re.IGNORECASE):
            service_id = lot_data["service_id"]
            base_q = lot_data["quantity"]
            real_q = base_q * order_amount
            srv_num = lot_data.get("service_number", 1)
            return service_id, real_q, srv_num
    return None

def is_valid_link(link: str) -> Tuple[bool, str]:
    valid_links = load_valid_links()
    if not link.startswith(("http://", "https://")):
        return False, "‚ùå –°—Å—ã–ª–∫–∞ –¥–æ–ª–∂–Ω–∞ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å http:// –∏–ª–∏ https://."
    for pf in valid_links:
        if pf in link:
            return True, f"‚úÖ –°—Å—ã–ª–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞ ({pf})."
    return False, "‚ùå –ù–µ–¥–æ–ø—É—Å—Ç–∏–º–∞—è —Å—Å—ã–ª–∫–∞."

def auto_smm_handler(c: Cardinal, e: Union[NewMessageEvent, NewOrderEvent], *args):
    global RUNNING, orders_info, waiting_for_link

    if not RUNNING and not isinstance(e, NewMessageEvent):
        return

    my_id = c.account.id
    bot_ = c.telegram.bot

    if isinstance(e, NewMessageEvent):
        if e.message.author_id == my_id:
            return

        msg_text = e.message.text.strip()
        msg_author_id = e.message.author_id
        msg_chat_id = e.message.chat_id

        logger.info(f"–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {e.message.author}: {msg_text}")

        m_check = re.match(r'^—á–µ–∫\s+(\d+)$', msg_text.lower())
        if m_check:
            order_num = m_check.group(1)
            od_ = load_orders_data()
            found = next((o for o in od_ if str(o["id_zakaz"]) == order_num), None)
            if not found:
                c.send_message(msg_chat_id, "‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ.")
                return
            cfg = load_config()
            service_cfg = cfg["services"].get(str(found["service_number"]))
            if not service_cfg:
                c.send_message(msg_chat_id, f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –∫–æ–Ω—Ñ–∏–≥ –¥–ª—è service_number={found['service_number']}")
                return
            api_url = service_cfg["api_url"]
            api_key = service_cfg["api_key"]
            url_ = f"{api_url}?action=status&order={order_num}&key={api_key}"
            try:
                rr = requests.get(url_)
                rr.raise_for_status()
                rdata = rr.json()
                st_ = rdata.get("status", "–Ω–µ–∏–∑–≤.")
                rm_ = rdata.get("remains", "–Ω–µ–∏–∑–≤.")
                ch_ = rdata.get("charge", "–Ω–µ–∏–∑–≤.")
                cur_ = rdata.get("currency", "–Ω–µ–∏–∑–≤.")
                message_text = f"–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ {order_num}:\n\n–°—Ç–∞—Ç—É—Å: {st_}\n–û—Å—Ç–∞–ª–æ—Å—å: {rm_}\n–°–ø–∏—Å–∞–Ω–æ: {ch_} {cur_}"
                c.send_message(msg_chat_id, message_text)
            except Exception as ex:
                c.send_message(msg_chat_id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∑–∞–∫–∞–∑–∞: {ex}")
            return

        m_refill = re.match(r'^—Ä–µ—Ñ–∏–ª–ª\s+(\d+)$', msg_text.lower())
        if m_refill:
            order_num = m_refill.group(1)
            c.send_message(msg_chat_id, "üîÑ –ó–∞–ø—Ä–∞—à–∏–≤–∞—é —Ä–µ—Ñ–∏–ª–ª...")
            od_ = load_orders_data()
            found = next((o for o in od_ if str(o["id_zakaz"]) == order_num), None)
            if not found:
                c.send_message(msg_chat_id, "‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ.")
                return
            cfg = load_config()
            service_cfg = cfg["services"].get(str(found["service_number"]))
            if not service_cfg:
                c.send_message(msg_chat_id, f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –∫–æ–Ω—Ñ–∏–≥ –¥–ª—è service_number={found['service_number']}")
                return
            api_url = service_cfg["api_url"]
            api_key = service_cfg["api_key"]
            url_ = f"{api_url}?action=refill&order={order_num}&key={api_key}"
            try:
                rr = requests.get(url_)
                rr.raise_for_status()
                rdata = rr.json()
                st_ = rdata.get("status", 0)
                if str(st_) in ("1", "true"):
                    c.send_message(msg_chat_id, "‚úÖ –†–µ—Ñ–∏–ª–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω.")
                else:
                    error_msg = rdata.get("error", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
                    c.send_message(msg_chat_id, f"‚ùå –†–µ—Ñ–∏–ª–ª –æ—Ç–∫–ª–æ–Ω—ë–Ω: {error_msg}")
            except Exception as ex:
                c.send_message(msg_chat_id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —Ä–µ—Ñ–∏–ª–ª–∞: {ex}")
            return
        
        for order_id, data in list(waiting_for_link.items()):
            if data["buyer_id"] == msg_author_id:
                if data["step"] == "await_link":
                    link_m = re.search(r'(https?://\S+)', msg_text)
                    if not link_m:
                        c.send_message(msg_chat_id, "‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—Å—ã–ª–∫–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ...")
                        return
                    link_ = link_m.group(0)
                    ok, reason = is_valid_link(link_)
                    if not ok:
                        c.send_message(msg_chat_id, reason)
                        return
                    data["link"] = link_
                    
                    cfg = load_config()
                    confirm_link = cfg.get("confirm_link", True)
                    
                    if confirm_link:
                        data["step"] = "await_confirm"
                        c.send_message(msg_chat_id, f"‚úÖ –°—Å—ã–ª–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞: {link_}\n–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ: + / -")
                        return
                    else:
                        order_data = waiting_for_link.pop(order_id, None)
                        if order_data:
                            process_link_without_confirmation(c, order_data)
                        else:
                            c.send_message(msg_chat_id, "‚ùå –ó–∞–∫–∞–∑ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                        return

                elif data["step"] == "await_confirm":
                    if msg_text.lower() == "+":
                        order_data = waiting_for_link.pop(order_id, None)
                        if order_data:
                            process_link_without_confirmation(c, order_data)
                        else:
                            c.send_message(msg_chat_id, "‚ùå –ó–∞–∫–∞–∑ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                        return
                    elif msg_text.lower() == "-":
                        data["step"] = "await_link"
                        c.send_message(msg_chat_id, "‚ùå –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ. –í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥—É—é —Å—Å—ã–ª–∫—É.")
                        return
                    else:
                        c.send_message(msg_chat_id, "‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ + –∏–ª–∏ -. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ.")
                        return

    elif isinstance(e, NewOrderEvent):
        order_ = e.order
        orderID = order_.id
        orderDesc = order_.description
        orderAmount = order_.amount
        orderPrice = order_.price

        logger.info(f"–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ #{orderID}: {orderDesc}, x{orderAmount}")

        cfg = load_config()
        found_lot = get_tg_id_by_description(orderDesc, orderAmount)
        if found_lot is None:
            logger.info("–õ–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é. –ü—Ä–æ–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏.")
            return

        service_id, real_amount, srv_number = found_lot

        od_full = c.account.get_order(orderID)
        buyer_chat_id = od_full.chat_id
        buyer_id = od_full.buyer_id
        buyer_username = od_full.buyer_username
        orders_info[orderID] = {
            "buyer_id": buyer_id,
            "chat_id": buyer_chat_id,
            "summa": orderPrice
        }

        save_order_info(orderID, orderPrice, orderDesc, orderPrice)

        try:
            msg_payment = cfg["messages"]["after_payment"].format(
                buyer_username=buyer_username,
                orderDesc=orderDesc,
                orderPrice=orderPrice,
                orderAmount=orderAmount
            )
        except KeyError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ —à–∞–±–ª–æ–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏—è: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è {e}")
            msg_payment = "‚ù§Ô∏è –ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ –æ–ø–ª–∞—Ç—É! –£–∫–∞–∂–∏—Ç–µ —Å—Å—ã–ª–∫—É –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∑–∞–∫–∞–∑–∞."
        
        c.send_message(buyer_chat_id, msg_payment)

        waiting_for_link[str(orderID)] = {
            "buyer_id": buyer_id,
            "chat_id": buyer_chat_id,
            "service_id": service_id,
            "real_amount": real_amount,
            "order_id_funpay": orderID,
            "price": orderPrice,
            "service_number": srv_number,
            "step": "await_link"
        }

def start_smm(call: types.CallbackQuery):
    global RUNNING, IS_STARTED, ORDER_CHECK_THREAD, AUTO_LOTS_SEND_THREAD, cardinal_instance

    if RUNNING:
        bot.answer_callback_query(call.id, "üîÑ –ü–ª–∞–≥–∏–Ω —É–∂–µ –∑–∞–ø—É—â–µ–Ω.")
        return

    RUNNING = True
    IS_STARTED = True
    
    c_ = cardinal_instance
    
    if not ORDER_CHECK_THREAD or not ORDER_CHECK_THREAD.is_alive():
        ORDER_CHECK_THREAD = threading.Thread(target=start_order_checking, args=(c_,))
        ORDER_CHECK_THREAD.daemon = True
        ORDER_CHECK_THREAD.start()
    
    if not AUTO_LOTS_SEND_THREAD or not AUTO_LOTS_SEND_THREAD.is_alive():
        AUTO_LOTS_SEND_THREAD = threading.Thread(target=start_auto_lots_sender, args=(c_,))
        AUTO_LOTS_SEND_THREAD.daemon = True
        AUTO_LOTS_SEND_THREAD.start()
    
    bot.answer_callback_query(call.id, "‚úÖ –ü–ª–∞–≥–∏–Ω —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!")
    smm_settings(call)

def stop_smm(call: types.CallbackQuery):
    global RUNNING
    
    if not RUNNING:
        bot.answer_callback_query(call.id, "üõë –ü–ª–∞–≥–∏–Ω –Ω–µ –∑–∞–ø—É—â–µ–Ω.")
        return

    RUNNING = False
    bot.answer_callback_query(call.id, "‚èπÔ∏è –ü–ª–∞–≥–∏–Ω –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
    smm_settings(call)

def smm_settings(message: Union[types.Message, types.CallbackQuery]):
    if isinstance(message, types.CallbackQuery):
        call = message
        chat_id = call.message.chat.id
        message_id = call.message.message_id
    else:
        chat_id = message.chat.id
        message_id = None

    cfg = load_config()
    lmap = cfg.get("lot_mapping", {})
    auto_refunds = cfg.get("auto_refunds", True)
    confirm_link = cfg.get("confirm_link", True)
    notif_chat_id = cfg.get("notification_chat_id", "–ù–µ –∑–∞–¥–∞–Ω")
    send_auto_lots = cfg.get("send_auto_lots", True)
    send_auto_lots_interval = cfg.get("send_auto_lots_interval", 30)
    auto_start = cfg.get("auto_start", False)
    subcategory_ids = cfg.get("subcategory_ids", [])

    txt_ = f"""
<b>üì± SMM Manager v{VERSION}</b>
‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
‚Ä¢ üü¢ –°—Ç–∞—Ç—É—Å: <code>{'–∑–∞–ø—É—â–µ–Ω' if RUNNING else '–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}</code>
‚Ä¢ üì¶ –õ–æ—Ç–æ–≤: <code>{len(lmap)}</code>
‚Ä¢ üí∏ –ê–≤—Ç–æ–≤–æ–∑–≤—Ä–∞—Ç—ã: <code>{'–≤–∫–ª' if auto_refunds else '–≤—ã–∫–ª'}</code>
‚Ä¢ üîó –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∏: <code>{'–≤–∫–ª' if confirm_link else '–≤—ã–∫–ª'}</code>
‚Ä¢ üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ auto_lots: <code>{'–≤–∫–ª' if send_auto_lots else '–≤—ã–∫–ª'}</code> [‚è±Ô∏è –∏–Ω—Ç–µ—Ä–≤–∞–ª: {send_auto_lots_interval} –º–∏–Ω]
‚Ä¢ ‚ö° –ê–≤—Ç–æ–∑–∞–ø—É—Å–∫: <code>{'–≤–∫–ª' if auto_start else '–≤—ã–∫–ª'}</code>
‚Ä¢ üìÇ –ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π: <code>{len(subcategory_ids)}</code>
‚Ä¢ üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: <code>{notif_chat_id}</code>
‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    """.strip()

    kb = InlineKeyboardMarkup(row_width=2)
    
    if RUNNING:
        kb.add(InlineKeyboardButton("‚õî –°—Ç–æ–ø", callback_data="stop_smm"))
    else:
        kb.add(InlineKeyboardButton("‚úÖ –°—Ç–∞—Ä—Ç", callback_data="start_smm"))
    
    kb.add(
        InlineKeyboardButton("üì¶ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ª–æ—Ç–∞–º–∏", callback_data="lot_settings"),
        InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –ª–æ—Ç", callback_data="add_new_lot")
    )
    
    kb.add(
        InlineKeyboardButton("üîå –ù–∞—Å—Ç—Ä–æ–π–∫–∏ API", callback_data="api_settings"),
        InlineKeyboardButton("üåê –î–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ —Å–∞–π—Ç—ã", callback_data="manage_websites")
    )
    
    kb.add(
        InlineKeyboardButton("üìù –®–∞–±–ª–æ–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏–π", callback_data="edit_messages"),
        InlineKeyboardButton("‚öôÔ∏è –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="misc_settings")
    )
    
    kb.add(
        InlineKeyboardButton("üìÇ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏", callback_data="manage_subcategories"),
        InlineKeyboardButton("üíæ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞–º–∏", callback_data="files_menu")
    )
    
    kb.add(
        InlineKeyboardButton("üîó –ü–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏", callback_data="links_menu")
    )

    if message_id:
        bot.edit_message_text(txt_, chat_id, message_id, parse_mode='HTML', reply_markup=kb)
    else:
        bot.send_message(chat_id, txt_, parse_mode='HTML', reply_markup=kb)

def manage_subcategories(call: types.CallbackQuery):
    kb_ = InlineKeyboardMarkup()
    kb_.add(InlineKeyboardButton("üëÅÔ∏è –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏", callback_data="show_subcategories"))
    kb_.add(InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏", callback_data="add_subcategories"))
    kb_.add(InlineKeyboardButton("‚ûñ –£–¥–∞–ª–∏—Ç—å –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏", callback_data="delete_subcategories"))
    kb_.add(InlineKeyboardButton("üîÑ –ö—ç—à–∏—Ä–æ–≤–∞—Ç—å –ª–æ—Ç—ã", callback_data="cache_lots"))
    kb_.add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="return_to_settings"))

    bot.edit_message_text(
        "üìÇ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –ª–æ—Ç–æ–≤:",
        call.message.chat.id,
        call.message.message_id,
        reply_markup=kb_
    )

def process_add_subcategories(message: types.Message):
    try:
        text = message.text.strip()
        new_ids = {int(id_.strip()) for id_ in text.split(",") if id_.strip().isdigit()}
        
        if not new_ids:
            bot.send_message(message.chat.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ ID –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä, 732, 704).")
            return

        cfg = load_config()
        current_ids = set(cfg.get("subcategory_ids", []))
        updated_ids = list(current_ids | new_ids)
        
        cfg["subcategory_ids"] = updated_ids
        save_config(cfg)
        bot.send_message(
            message.chat.id,
            f"‚úÖ –ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã. –¢–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫: {', '.join(map(str, updated_ids))}"
        )
    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

def process_delete_subcategories(message: types.Message):
    try:
        text = message.text.strip()
        ids_to_delete = {int(id_.strip()) for id_ in text.split(",") if id_.strip().isdigit()}
        
        if not ids_to_delete:
            bot.send_message(message.chat.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ ID –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä, 732, 704).")
            return

        cfg = load_config()
        current_ids = set(cfg.get("subcategory_ids", []))
        updated_ids = list(current_ids - ids_to_delete)
        
        cfg["subcategory_ids"] = updated_ids
        save_config(cfg)
        bot.send_message(
            message.chat.id,
            f"‚úÖ –ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —É–¥–∞–ª–µ–Ω—ã. –¢–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫: {', '.join(map(str, updated_ids))}"
        )
    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

def cache_lots_thread(call: types.CallbackQuery):
    global CACHE_RUNNING
    try:
        CACHE_RUNNING = True
        cfg = load_config()
        subcategory_ids = cfg.get("subcategory_ids", [])
        if not subcategory_ids:
            bot.send_message(call.message.chat.id, "‚ùå –°–ø–∏—Å–æ–∫ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø—É—Å—Ç. –î–æ–±–∞–≤—å—Ç–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏.")
            CACHE_RUNNING = False
            return

        c = cardinal_instance
        profile = c.account.get_user(c.account.id)
        lots_info = get_lots_info(c, profile, subcategory_ids)
        with open("storage/cache/lots.json", "w", encoding="utf-8") as f:
            json.dump(lots_info, f, indent=4, ensure_ascii=False)

        auto_lots_cfg = load_config()
        lot_map = auto_lots_cfg.get("lot_mapping", {})
        for lot_info in lots_info:
            lot_name = lot_info.get("description", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
            if not lot_name:
                continue
            found = False
            for lot_data in lot_map.values():
                if lot_data["name"] == lot_name:
                    found = True
                    break
            if not found:
                new_key = f"lot_{len(lot_map) + 1}"
                lot_map[new_key] = {
                    "name": lot_name,
                    "service_id": 1,
                    "quantity": 1,
                    "service_number": 1
                }
        auto_lots_cfg["lot_mapping"] = lot_map
        save_config(auto_lots_cfg)

        with open("storage/cache/lots.json", "rb") as f:
            bot.send_document(call.message.chat.id, f, caption="‚úÖ –õ–æ—Ç—ã —É—Å–ø–µ—à–Ω–æ –∫—ç—à–∏—Ä–æ–≤–∞–Ω—ã –∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –∫–æ–Ω—Ñ–∏–≥.")
        CACHE_RUNNING = False
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–∏ –ª–æ—Ç–æ–≤: {e}")
        bot.send_message(call.message.chat.id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–∏ –ª–æ—Ç–æ–≤: {str(e)}")
        CACHE_RUNNING = False

def get_lots_info(c: Cardinal, profile, subcategory_ids: list[int]) -> list[dict]:
    result = []
    for lot in profile.get_lots():
        if lot.subcategory.id not in subcategory_ids:
            continue
        try:
            lot_fields = c.account.get_lot_fields(lot.id)
            fields = lot_fields.fields
            lot_info = {
                "id": lot.id,
                "description": lot.description,
                "category_id": lot.subcategory.category.id,
                "category_name": lot.subcategory.category.name,
                "subcategory_id": lot.subcategory.id,
                "subcategory_name": lot.subcategory.name,
                "fields": fields,
            }
            result.append(lot_info)
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ª–æ—Ç–µ {lot.id}: {e}")
    return result

def files_menu(call: types.CallbackQuery):
    txt_ = """
<b>üíæ –†–∞–±–æ—Ç–∞ —Å —Ñ–∞–π–ª–∞–º–∏</b>

–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å —Ñ–∞–π–ª–∞–º–∏ –ø–ª–∞–≥–∏–Ω–∞, —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –∏ –æ—á–∏—â–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –∑–∞–∫–∞–∑–æ–≤.
    """.strip()
    
    kb_ = InlineKeyboardMarkup(row_width=2)
    
    kb_.row(
        InlineKeyboardButton("üì• –≠–∫—Å–ø–æ—Ä—Ç —Ñ–∞–π–ª–æ–≤", callback_data="export_files"),
        InlineKeyboardButton("üì§ –ó–∞–≥—Ä—É–∑–∏—Ç—å JSON", callback_data="upload_lots_json")
    )
    
    kb_.row(
        InlineKeyboardButton("üìã –õ–æ–≥–∏ –æ—à–∏–±–æ–∫", callback_data="export_errors"),
        InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∑–∞–∫–∞–∑—ã", callback_data="delete_orders")
    )
    
    kb_.add(InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="return_to_settings"))
    
    bot.edit_message_text(txt_, call.message.chat.id, call.message.message_id, parse_mode='HTML', reply_markup=kb_)

def misc_settings(call: types.CallbackQuery):
    cfg = load_config()
    auto_refunds = cfg.get("auto_refunds", True)
    confirm_link = cfg.get("confirm_link", True)
    send_auto_lots = cfg.get("send_auto_lots", True)
    send_auto_lots_interval = cfg.get("send_auto_lots_interval", 30)
    auto_start = cfg.get("auto_start", False)
    
    txt_ = f"""
<b>‚öôÔ∏è –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏</b>

–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä–∞–±–æ—Ç—ã –ø–ª–∞–≥–∏–Ω–∞.

<b>–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:</b>
‚Ä¢ üí∏ –ê–≤—Ç–æ–≤–æ–∑–≤—Ä–∞—Ç—ã: <code>{'–≤–∫–ª' if auto_refunds else '–≤—ã–∫–ª'}</code>
‚Ä¢ üîó –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∏: <code>{'–≤–∫–ª' if confirm_link else '–≤—ã–∫–ª'}</code>
‚Ä¢ üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞ auto_lots.json: <code>{'–≤–∫–ª' if send_auto_lots else '–≤—ã–∫–ª'}</code>
‚Ä¢ ‚è±Ô∏è –ò–Ω—Ç–µ—Ä–≤–∞–ª –æ—Ç–ø—Ä–∞–≤–∫–∏ (–º–∏–Ω—É—Ç—ã): <code>{send_auto_lots_interval}</code>
‚Ä¢ ‚ö° –ê–≤—Ç–æ–∑–∞–ø—É—Å–∫ –ø–ª–∞–≥–∏–Ω–∞: <code>{'–≤–∫–ª' if auto_start else '–≤—ã–∫–ª'}</code>
    """.strip()
    
    kb_ = InlineKeyboardMarkup(row_width=1)
    
    kb_.add(
        InlineKeyboardButton(f"{'üî¥ –í—ã–∫–ª—é—á–∏—Ç—å' if auto_refunds else 'üü¢ –í–∫–ª—é—á–∏—Ç—å'} –∞–≤—Ç–æ–≤–æ–∑–≤—Ä–∞—Ç—ã", callback_data="toggle_auto_refunds"),
        InlineKeyboardButton(f"{'üî¥ –í—ã–∫–ª—é—á–∏—Ç—å' if confirm_link else 'üü¢ –í–∫–ª—é—á–∏—Ç—å'} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∏", callback_data="toggle_confirm_link")
    )
    
    kb_.add(
        InlineKeyboardButton(f"{'üî¥ –í—ã–∫–ª—é—á–∏—Ç—å' if send_auto_lots else 'üü¢ –í–∫–ª—é—á–∏—Ç—å'} –æ—Ç–ø—Ä–∞–≤–∫—É auto_lots.json", callback_data="toggle_send_auto_lots"),
        InlineKeyboardButton("‚è±Ô∏è –ò–∑–º–µ–Ω–∏—Ç—å –∏–Ω—Ç–µ—Ä–≤–∞–ª –æ—Ç–ø—Ä–∞–≤–∫–∏", callback_data="change_send_interval")
    )
    
    kb_.add(
        InlineKeyboardButton(f"{'üî¥ –í—ã–∫–ª—é—á–∏—Ç—å' if auto_start else 'üü¢ –í–∫–ª—é—á–∏—Ç—å'} –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫ –ø–ª–∞–≥–∏–Ω–∞", callback_data="toggle_auto_start"),
        InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å –Ω–æ–º–µ—Ä–∞ –ª–æ—Ç–æ–≤", callback_data="update_lot_ids")
    )
    
    kb_.add(
        InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –≤—Å–µ –ª–æ—Ç—ã", callback_data="delete_all_lots"),
        InlineKeyboardButton("üîî –£–∫–∞–∑–∞—Ç—å Chat ID –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π", callback_data="set_notification_chat_id")
    )
    
    kb_.add(
        InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="return_to_settings")
    )
    
    bot.edit_message_text(txt_, call.message.chat.id, call.message.message_id, parse_mode='HTML', reply_markup=kb_)

def links_menu(call: types.CallbackQuery):
    txt_ = """
<b>üîó –ü–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏</b>

–ó–¥–µ—Å—å –≤—ã –Ω–∞–π–¥–µ—Ç–µ –≤–∞–∂–Ω—ã–µ —Å—Å—ã–ª–∫–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–ª–∞–≥–∏–Ω–æ–º –∏ —Å–µ—Ä–≤–∏—Å–∞–º–∏ SMM.
    """.strip()
    
    kb_ = InlineKeyboardMarkup(row_width=2)
    
    kb_.row(
        InlineKeyboardButton("üöÄ TwiBoost", url="https://twiboost.com/ref3364649"),
        InlineKeyboardButton("üöÄ LookSmm", url="https://looksmm.ru/ref3587384"),
        InlineKeyboardButton("üöÄ VexBoost", url="https://vexboost.ru/ref3589709")
    )
    
    kb_.add(InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="return_to_settings"))
    
    bot.edit_message_text(txt_, call.message.chat.id, call.message.message_id, parse_mode='HTML', reply_markup=kb_)

def get_statistics():
    if not os.path.exists(ORDERS_PATH):
        return None
    with open(ORDERS_PATH, 'r', encoding='utf-8') as f:
        orders = json.load(f)

    now_ = datetime.now()
    day_ago = now_ - timedelta(days=1)
    week_ago = now_ - timedelta(days=7)
    month_ago = now_ - timedelta(days=30)

    day_orders = [o for o in orders if datetime.strptime(o["date"], "%Y-%m-%d %H:%M:%S") >= day_ago]
    week_orders = [o for o in orders if datetime.strptime(o["date"], "%Y-%m-%d %H:%M:%S") >= week_ago]
    month_orders = [o for o in orders if datetime.strptime(o["date"], "%Y-%m-%d %H:%M:%S") >= month_ago]
    all_orders = orders

    day_total = sum(o["summa"] for o in day_orders)
    week_total = sum(o["summa"] for o in week_orders)
    month_total = sum(o["summa"] for o in month_orders)
    all_total = sum(o["summa"] for o in all_orders)

    return {
        "day_orders": len(day_orders),
        "day_total": day_total,
        "week_orders": len(week_orders),
        "week_total": week_total,
        "month_orders": len(month_orders),
        "month_total": month_total,
        "all_time_orders": len(all_orders),
        "all_time_total": all_total,
    }

def generate_lots_keyboard(page: int = 0) -> InlineKeyboardMarkup:
    cfg = load_config()
    lot_map = cfg.get("lot_mapping", {})
    items = list(lot_map.items())

    per_page = 10
    start_ = page * per_page
    end_ = start_ + per_page
    chunk = items[start_:end_]

    kb_ = InlineKeyboardMarkup(row_width=1)
    for lot_key, lot_data in chunk:
        name_ = lot_data["name"]
        sid_ = lot_data["service_id"]
        qty_ = lot_data["quantity"]
        snum_ = lot_data.get("service_number", 1)
        btn_text = f"{name_} [ID={sid_}, Q={qty_}, S={snum_}]"
        cd_ = f"edit_lot_{lot_key}"
        kb_.add(InlineKeyboardButton(btn_text, callback_data=cd_))

    nav_buttons = []
    if page > 0:
        nav_buttons.append(InlineKeyboardButton("‚¨ÖÔ∏è", callback_data=f"prev_page_{page-1}"))
    if end_ < len(items):
        nav_buttons.append(InlineKeyboardButton("‚û°Ô∏è", callback_data=f"next_page_{page+1}"))
    if nav_buttons:
        kb_.row(*nav_buttons)

    kb_.add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="return_to_settings"))
    return kb_

def edit_lot(call: types.CallbackQuery, lot_key: str):
    cfg = load_config()
    lot_map = cfg.get("lot_mapping", {})
    if lot_key not in lot_map:
        bot.edit_message_text(f"‚ùå –õ–æ—Ç {lot_key} –Ω–µ –Ω–∞–π–¥–µ–Ω.", call.message.chat.id, call.message.message_id)
        return

    ld_ = lot_map[lot_key]
    txt_ = f"""
<b>{lot_key}</b>
üìõ –ù–∞–∑–≤–∞–Ω–∏–µ: <code>{ld_['name']}</code>
üÜî ID —É—Å–ª—É–≥–∏: <code>{ld_['service_id']}</code>
üî¢ –ö–æ–ª-–≤–æ: <code>{ld_['quantity']}</code>
üî¢ –ù–æ–º–µ—Ä —Å–µ—Ä–≤–∏—Å–∞: <code>{ld_.get('service_number', 1)}</code>
""".strip()

    kb_ = InlineKeyboardMarkup(row_width=1)
    kb_.add(
        InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ", callback_data=f"change_name_{lot_key}"),
        InlineKeyboardButton("üÜî –ò–∑–º–µ–Ω–∏—Ç—å ID —É—Å–ª—É–≥–∏", callback_data=f"change_id_{lot_key}"),
        InlineKeyboardButton("üî¢ –ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ", callback_data=f"change_quantity_{lot_key}"),
        InlineKeyboardButton("üî¢ –ò–∑–º–µ–Ω–∏—Ç—å –Ω–æ–º–µ—Ä —Å–µ—Ä–≤–∏—Å–∞", callback_data=f"change_snum_{lot_key}"),
    )
    kb_.add(InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –ª–æ—Ç", callback_data=f"delete_one_lot_{lot_key}"))
    kb_.add(InlineKeyboardButton("üîô –ö —Å–ø–∏—Å–∫—É", callback_data="return_to_lots"))
    bot.edit_message_text(txt_, call.message.chat.id, call.message.message_id, parse_mode="HTML", reply_markup=kb_)

def delete_one_lot(call: types.CallbackQuery, lot_key: str):
    cfg = load_config()
    lot_map = cfg.get("lot_mapping", {})
    if lot_key in lot_map:
        del lot_map[lot_key]
        cfg["lot_mapping"] = lot_map
        reindex_lots(cfg)
        bot.edit_message_text(f"‚úÖ –õ–æ—Ç {lot_key} —É–¥–∞–ª—ë–Ω –∏ –ª–æ—Ç—ã –ø–µ—Ä–µ–∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω—ã.", call.message.chat.id, call.message.message_id, reply_markup=generate_lots_keyboard(0))
    else:
        bot.edit_message_text(f"‚ùå –õ–æ—Ç {lot_key} –Ω–µ –Ω–∞–π–¥–µ–Ω.", call.message.chat.id, call.message.message_id)

def delete_all_lots_func(call: types.CallbackQuery):
    cfg = load_config()
    preserved_notification_chat_id = cfg.get("notification_chat_id")
    preserved_services = cfg.get("services", {})
    
    new_config = {
        "lot_mapping": {},
        "services": preserved_services,
        "auto_refunds": cfg.get("auto_refunds", True),
        "messages": cfg.get("messages", {}),
        "notification_chat_id": preserved_notification_chat_id
    }
    
    save_config(new_config)
    bot.edit_message_text("‚úÖ –í—Å–µ –ª–æ—Ç—ã —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã. Chat ID –∏ —Å–µ—Ä–≤–∏—Å—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.", 
                         call.message.chat.id, 
                         call.message.message_id)

def process_name_change(message: types.Message, lot_key: str):
    new_name = message.text.strip()
    cfg = load_config()
    lot_map = cfg.get("lot_mapping", {})
    if lot_key not in lot_map:
        bot.send_message(message.chat.id, f"‚ùå –õ–æ—Ç {lot_key} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    lot_map[lot_key]["name"] = new_name
    cfg["lot_mapping"] = lot_map
    save_config(cfg)
    kb_ = InlineKeyboardMarkup()
    kb_.add(InlineKeyboardButton("üîô –ö –ª–æ—Ç–∞–º", callback_data="return_to_lots"))
    bot.send_message(message.chat.id, f"‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ –ª–æ—Ç–∞ {lot_key} –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ {new_name}.", reply_markup=kb_)

def process_id_change(message: types.Message, lot_key: str):
    try:
        new_id = int(message.text.strip())
    except ValueError:
        bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞: ID —É—Å–ª—É–≥–∏ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
        return
    cfg = load_config()
    lot_map = cfg.get("lot_mapping", {})
    if lot_key not in lot_map:
        bot.send_message(message.chat.id, f"‚ùå –õ–æ—Ç {lot_key} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    lot_map[lot_key]["service_id"] = new_id
    cfg["lot_mapping"] = lot_map
    save_config(cfg)
    kb_ = InlineKeyboardMarkup()
    kb_.add(InlineKeyboardButton("üîô –ö –ª–æ—Ç–∞–º", callback_data="return_to_lots"))
    bot.send_message(message.chat.id, f"‚úÖ ID —É—Å–ª—É–≥–∏ –¥–ª—è {lot_key} –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ {new_id}.", reply_markup=kb_)

def process_quantity_change(message: types.Message, lot_key: str):
    try:
        new_q = int(message.text.strip())
    except ValueError:
        bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
        return
    cfg = load_config()
    lot_map = cfg.get("lot_mapping", {})
    if lot_key not in lot_map:
        bot.send_message(message.chat.id, f"‚ùå –õ–æ—Ç {lot_key} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    lot_map[lot_key]["quantity"] = new_q
    cfg["lot_mapping"] = lot_map
    save_config(cfg)
    kb_ = InlineKeyboardMarkup()
    kb_.add(InlineKeyboardButton("üîô –ö –ª–æ—Ç–∞–º", callback_data="return_to_lots"))
    bot.send_message(message.chat.id, f"‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è {lot_key} –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ {new_q}.", reply_markup=kb_)

def process_service_num_change(message: types.Message, lot_key: str):
    try:
        new_snum = int(message.text.strip())
        cfg = load_config()
        if str(new_snum) not in cfg["services"]:
            bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞: –°–µ—Ä–≤–∏—Å #{new_snum} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
            return
        lot_map = cfg.get("lot_mapping", {})
        if lot_key not in lot_map:
            bot.send_message(message.chat.id, f"‚ùå –õ–æ—Ç {lot_key} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        lot_map[lot_key]["service_number"] = new_snum
        cfg["lot_mapping"] = lot_map
        save_config(cfg)
        kb_ = InlineKeyboardMarkup()
        kb_.add(InlineKeyboardButton("üîô –ö –ª–æ—Ç–∞–º", callback_data="return_to_lots"))
        bot.send_message(message.chat.id, f"‚úÖ –ù–æ–º–µ—Ä —Å–µ—Ä–≤–∏—Å–∞ –¥–ª—è {lot_key} –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ {new_snum}.", reply_markup=kb_)
    except ValueError:
        bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞: –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å–µ—Ä–≤–∏—Å–∞ (—á–∏—Å–ª–æ).")

def process_new_lot_id_step(message: types.Message):
    try:
        lot_id = int(message.text.strip())
        logger.info(f"–ü–æ–ª—É—á–µ–Ω ID –ª–æ—Ç–∞: {lot_id}")
        
        try:
            lot_fields = cardinal_instance.account.get_lot_fields(lot_id)
            fields = lot_fields.fields
            name = lot_fields.title_ru
            if not name:
                name = lot_fields.title_en
        except Exception as e:
            bot.send_message(message.chat.id, f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ª–æ—Ç–∞: {e}")
            return

        cfg = load_config()
        lot_map = cfg.get("lot_mapping", {})

        new_lot_key = f"lot_{len(lot_map) + 1}"

        lot_map[new_lot_key] = {
            "name": name,
            "service_id": 1,
            "quantity": 1,
            "service_number": 1
        }

        cfg["lot_mapping"] = lot_map
        save_config(cfg)

        kb_ = InlineKeyboardMarkup()
        kb_.add(InlineKeyboardButton("üîô –ö –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", callback_data="return_to_settings"))
        bot.send_message(message.chat.id, f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π –ª–æ—Ç {new_lot_key} —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º: {name}", reply_markup=kb_)
        logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π –ª–æ—Ç: {new_lot_key} —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º: {name}")

    except ValueError:
        error_msg = "‚ùå –û—à–∏–±–∫–∞: ID –ª–æ—Ç–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º."
        logger.error(error_msg)
        bot.send_message(message.chat.id, error_msg)
    except Exception as e:
        error_msg = f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: {e}"
        logger.error(error_msg)
        bot.send_message(message.chat.id, error_msg)

def api_settings_menu(call):
    cfg = load_config()
    services = cfg["services"]

    text_ = """
<b>üîå –ù–∞—Å—Ç—Ä–æ–π–∫–∏ API —Å–µ—Ä–≤–∏—Å–æ–≤ SMM</b>

–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Ä–∞–∑–ª–∏—á–Ω—ã–º SMM-—Å–µ—Ä–≤–∏—Å–∞–º, 
–ø—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å –∏–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–µ —Å–µ—Ä–≤–∏—Å—ã.
"""

    for srv_num, srv_data in services.items():
        text_ += f"""
<b>üî¢ –°–µ—Ä–≤–∏—Å #{srv_num}</b>
‚Ä¢ üåê URL: <code>{srv_data['api_url']}</code>
‚Ä¢ üîë API KEY: <code>{srv_data['api_key']}</code>
"""

    kb = InlineKeyboardMarkup(row_width=2)
    
    kb.row(InlineKeyboardButton("üåê API URLs", callback_data="header_no_action"))
    
    api_buttons = []
    for srv_num in services:
        api_buttons.append(InlineKeyboardButton(f"–°–µ—Ä–≤–∏—Å #{srv_num}", callback_data=f"edit_apiurl_{srv_num}"))
    kb.add(*api_buttons)
    
    kb.row(InlineKeyboardButton("üîë API Keys", callback_data="header_no_action"))
    
    key_buttons = []
    for srv_num in services:
        key_buttons.append(InlineKeyboardButton(f"–ö–ª—é—á #{srv_num}", callback_data=f"edit_apikey_{srv_num}"))
    kb.add(*key_buttons)
    
    kb.row(InlineKeyboardButton("üí∞ –ë–∞–ª–∞–Ω—Å—ã —Å–µ—Ä–≤–∏—Å–æ–≤", callback_data="header_no_action"))
    
    balance_buttons = []
    for srv_num in services:
        balance_buttons.append(InlineKeyboardButton(f"–ë–∞–ª–∞–Ω—Å #{srv_num}", callback_data=f"check_balance_{srv_num}"))
    kb.add(*balance_buttons)
    
    kb.row(
        InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–µ—Ä–≤–∏—Å", callback_data="add_service"),
        InlineKeyboardButton("‚ûñ –£–¥–∞–ª–∏—Ç—å —Å–µ—Ä–≤–∏—Å", callback_data="delete_service")
    )
    
    kb.add(InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="return_to_settings"))

    bot.edit_message_text(text_, call.message.chat.id, call.message.message_id, parse_mode="HTML", reply_markup=kb)

def process_apiurl_change(message: types.Message, service_idx: int):
    new_url = message.text.strip()
    
    if not new_url.startswith(("http://", "https://")):
        kb_ = InlineKeyboardMarkup()
        kb_.add(InlineKeyboardButton("üîô –ö –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º API", callback_data="api_settings"))
        bot.send_message(message.chat.id, "‚ùå URL –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å http:// –∏–ª–∏ https://", reply_markup=kb_)
        return
        
    cfg = load_config()
    if str(service_idx) not in cfg["services"]:
        kb_ = InlineKeyboardMarkup()
        kb_.add(InlineKeyboardButton("üîô –ö –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º API", callback_data="api_settings"))
        bot.send_message(message.chat.id, f"‚ùå –°–µ—Ä–≤–∏—Å #{service_idx} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.", reply_markup=kb_)
        return
        
    old_url = cfg["services"][str(service_idx)]["api_url"]
    cfg["services"][str(service_idx)]["api_url"] = new_url
    save_config(cfg)
    
    kb_ = InlineKeyboardMarkup(row_width=1)
    kb_.add(
        InlineKeyboardButton("üí∞ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data=f"check_balance_{service_idx}"),
        InlineKeyboardButton("üîô –ö –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º API", callback_data="api_settings")
    )
    
    text_ = f"""
‚úÖ URL —Å–µ—Ä–≤–∏—Å–∞ #{service_idx} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!

‚Ä¢ –ë—ã–ª–æ: <code>{old_url}</code>
‚Ä¢ –°—Ç–∞–ª–æ: <code>{new_url}</code>

–í—ã –º–æ–∂–µ—Ç–µ —Å—Ä–∞–∑—É –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å —Å–µ—Ä–≤–∏—Å–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏.
    """.strip()
    
    bot.send_message(message.chat.id, text_, parse_mode="HTML", reply_markup=kb_)

def process_apikey_change(message: types.Message, service_idx: int):
    new_key = message.text.strip()
    
    if not new_key:
        kb_ = InlineKeyboardMarkup()
        kb_.add(InlineKeyboardButton("üîô –ö –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º API", callback_data="api_settings"))
        bot.send_message(message.chat.id, "‚ùå API –∫–ª—é—á –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º", reply_markup=kb_)
        return
        
    cfg = load_config()
    if str(service_idx) not in cfg["services"]:
        kb_ = InlineKeyboardMarkup()
        kb_.add(InlineKeyboardButton("üîô –ö –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º API", callback_data="api_settings"))
        bot.send_message(message.chat.id, f"‚ùå –°–µ—Ä–≤–∏—Å #{service_idx} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.", reply_markup=kb_)
        return
    
    old_key = cfg["services"][str(service_idx)]["api_key"]
    old_key_masked = f"{old_key[:4]}...{old_key[-4:]}" if len(old_key) > 8 else old_key
    new_key_masked = f"{new_key[:4]}...{new_key[-4:]}" if len(new_key) > 8 else new_key
    
    cfg["services"][str(service_idx)]["api_key"] = new_key
    save_config(cfg)
    
    kb_ = InlineKeyboardMarkup(row_width=1)
    kb_.add(
        InlineKeyboardButton("üí∞ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data=f"check_balance_{service_idx}"),
        InlineKeyboardButton("üîô –ö –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º API", callback_data="api_settings")
    )
    
    text_ = f"""
‚úÖ API-–∫–ª—é—á —Å–µ—Ä–≤–∏—Å–∞ #{service_idx} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!

‚Ä¢ –ë—ã–ª–æ: <code>{old_key_masked}</code>
‚Ä¢ –°—Ç–∞–ª–æ: <code>{new_key_masked}</code>

–í—ã –º–æ–∂–µ—Ç–µ —Å—Ä–∞–∑—É –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å —Å–µ—Ä–≤–∏—Å–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏.
    """.strip()
    
    bot.send_message(message.chat.id, text_, parse_mode="HTML", reply_markup=kb_)

def check_balance_func(call: types.CallbackQuery, service_idx: int):
    cfg = load_config()
    s_ = cfg["services"].get(str(service_idx))
    if not s_:
        bot.edit_message_text(f"‚ùå –°–µ—Ä–≤–∏—Å {service_idx} –Ω–µ –Ω–∞–π–¥–µ–Ω.", call.message.chat.id, call.message.message_id)
        return
        
    bot.edit_message_text(f"‚è≥ –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ —Å–µ—Ä–≤–∏—Å–∞ #{service_idx}...", 
                         call.message.chat.id, call.message.message_id)
                         
    url_ = f"{s_['api_url']}?action=balance&key={s_['api_key']}"
    
    try:
        rr = requests.get(url_, timeout=10)
        rr.raise_for_status()
        d_ = rr.json()
        bal_ = d_.get("balance", "0")
        
        text_ = f"""
<b>üí∞ –ë–∞–ª–∞–Ω—Å —Å–µ—Ä–≤–∏—Å–∞ #{service_idx}</b>

‚Ä¢ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: <code>{bal_}</code>
‚Ä¢ –°–µ—Ä–≤–∏—Å: <code>{s_['api_url'].split('/')[2]}</code>
‚Ä¢ –í—Ä–µ–º—è –∑–∞–ø—Ä–æ—Å–∞: <code>{datetime.now().strftime('%H:%M:%S')}</code>
        """.strip()
        
        kb_ = InlineKeyboardMarkup()
        kb_.add(InlineKeyboardButton("üîô –ö –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º API", callback_data="api_settings"))
        
        bot.edit_message_text(text_, call.message.chat.id, call.message.message_id, 
                             parse_mode="HTML", reply_markup=kb_)
                             
    except requests.exceptions.Timeout:
        kb_ = InlineKeyboardMarkup()
        kb_.add(InlineKeyboardButton("üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å", callback_data=f"check_balance_{service_idx}"))
        kb_.add(InlineKeyboardButton("üîô –ö –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º API", callback_data="api_settings"))
        
        bot.edit_message_text(f"‚ö†Ô∏è –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–∏—Å–∞ #{service_idx} –∏—Å—Ç–µ–∫–ª–æ.",
                             call.message.chat.id, call.message.message_id, reply_markup=kb_)
                             
    except Exception as e:
        kb_ = InlineKeyboardMarkup()
        kb_.add(InlineKeyboardButton("üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å", callback_data=f"check_balance_{service_idx}"))
        kb_.add(InlineKeyboardButton("üîô –ö –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º API", callback_data="api_settings"))
        
        bot.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –±–∞–ª–∞–Ω—Å–∞ —Å–µ—Ä–≤–∏—Å–∞ #{service_idx}:\n<code>{str(e)[:100]}</code>", 
                             call.message.chat.id, call.message.message_id, 
                             parse_mode="HTML", reply_markup=kb_)

handlers_initialized = False

def init_telegram_handlers():
    global handlers_initialized, bot
    if handlers_initialized:
        return
        
    if cardinal_instance is None or cardinal_instance.telegram is None or cardinal_instance.telegram.bot is None:
        logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ Telegram: –±–æ—Ç –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω")
        return
        
    bot = cardinal_instance.telegram.bot
    logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ Telegram –¥–ª—è SMM Manager")
    
    @bot.callback_query_handler(func=lambda call: call.data == "show_subcategories")
    def show_subcategories(call: types.CallbackQuery):
        cfg = load_config()
        subcategory_ids = cfg.get("subcategory_ids", [])
        if subcategory_ids:
            text = f"–¢–µ–∫—É—â–∏–µ ID –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π: {', '.join(map(str, subcategory_ids))}"
        else:
            text = "–°–ø–∏—Å–æ–∫ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø—É—Å—Ç."
        kb_ = InlineKeyboardMarkup()
        kb_.add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="manage_subcategories"))
        bot.edit_message_text(text, call.message.chat.id, call.message.message_id, reply_markup=kb_)

    @bot.callback_query_handler(func=lambda call: call.data == "add_subcategories")
    def add_subcategories(call: types.CallbackQuery):
        msg_ = bot.edit_message_text("–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:", call.message.chat.id, call.message.message_id)
        bot.register_next_step_handler(msg_, process_add_subcategories)

    @bot.callback_query_handler(func=lambda call: call.data == "delete_subcategories")
    def delete_subcategories(call: types.CallbackQuery):
        msg_ = bot.edit_message_text("–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:", call.message.chat.id, call.message.message_id)
        bot.register_next_step_handler(msg_, process_delete_subcategories)

    @bot.callback_query_handler(func=lambda call: call.data == "cache_lots")
    def cache_lots(call: types.CallbackQuery):
        global CACHE_RUNNING
        if CACHE_RUNNING:
            bot.answer_callback_query(call.id, "‚ùå –ü—Ä–æ—Ü–µ—Å—Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è —É–∂–µ –∑–∞–ø—É—â–µ–Ω!", show_alert=True)
            return
        bot.answer_callback_query(call.id, "‚è≥ –ù–∞—á–∏–Ω–∞—é –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ—Ç–æ–≤...")
        threading.Thread(target=cache_lots_thread, args=(call,)).start()

    @bot.callback_query_handler(func=lambda call: call.data == "files_menu")
    def files_menu_callback(call: types.CallbackQuery):
        files_menu(call)

    @bot.callback_query_handler(func=lambda call: call.data == "misc_settings")
    def misc_settings_callback(call: types.CallbackQuery):
        misc_settings(call)

    @bot.callback_query_handler(func=lambda call: call.data == "links_menu")
    def links_menu_callback(call: types.CallbackQuery):
        links_menu(call)

    @bot.callback_query_handler(func=lambda call: call.data == "start_smm")
    def handle_start_smm(call: types.CallbackQuery):
        start_smm(call)

    @bot.callback_query_handler(func=lambda call: call.data == "stop_smm")
    def handle_stop_smm(call: types.CallbackQuery):
        stop_smm(call)
        
    @bot.callback_query_handler(func=lambda call: call.data == "manage_subcategories")
    def manage_subcategories_callback(call: types.CallbackQuery):
        manage_subcategories(call)

    @bot.message_handler(content_types=['document'])
    def handle_document_upload(message: types.Message):
        user_id = message.from_user.id
        logger.info(f"–ü–æ–ª—É—á–µ–Ω –¥–æ–∫—É–º–µ–Ω—Ç –æ—Ç {user_id}. –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∂–∏–¥–∞–Ω–∏—è...")
        if user_id not in waiting_for_lots_upload:
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –æ–∂–∏–¥–∞–µ—Ç –∑–∞–≥—Ä—É–∑–∫–∏ JSON")
            bot.send_message(message.chat.id, "‚ùå –í—ã –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ –∑–∞–≥—Ä—É–∑–∫—É JSON. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫.")
            return
        waiting_for_lots_upload.remove(user_id)
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–¥–∞–ª—ë–Ω –∏–∑ –æ–∂–∏–¥–∞–Ω–∏—è. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ñ–∞–π–ª...")
        file_id = message.document.file_id
        file_info = bot.get_file(file_id)
        downloaded_file = bot.download_file(file_info.file_path)
        try:
            data = json.loads(downloaded_file.decode('utf-8'))
            if "lot_mapping" not in data:
                bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞: –≤ —Ñ–∞–π–ª–µ –Ω–µ—Ç –∫–ª—é—á–∞ 'lot_mapping'.")
                logger.error("JSON –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç 'lot_mapping'")
                return
            save_config(data)
            kb_ = InlineKeyboardMarkup()
            kb_.add(InlineKeyboardButton("üîô –ö –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", callback_data="return_to_settings"))
            bot.send_message(message.chat.id, "‚úÖ –ù–æ–≤—ã–π auto_lots.json —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω!", reply_markup=kb_)
            logger.info("JSON —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω")
        except json.JSONDecodeError as e:
            bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å —Å—á–∏—Ç–∞—Ç—å JSON. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å. ({e})")
            logger.error(f"–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON: {e}")
        except Exception as e:
            bot.send_message(message.chat.id, f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞: {e}")
            logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ: {e}")

    cfg = load_config()
    cardinal_instance.add_telegram_commands(UUID, [
        ("smm", "–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è SMM", True)
    ])
    
    @bot.message_handler(commands=['smm'])
    def smm_command_handler(m: types.Message):
        smm_settings(m)

    @bot.callback_query_handler(func=lambda call: call.data == "manage_websites")
    def manage_websites(call: types.CallbackQuery):
        valid_links = load_valid_links()
        if valid_links:
            kb_ = InlineKeyboardMarkup(row_width=2)
            for site in valid_links:
                kb_.add(
                    InlineKeyboardButton(site, callback_data=f"view_website_{site}"),
                    InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_website_{site}")
                )
        else:
            kb_ = InlineKeyboardMarkup(row_width=1)
        
        kb_.add(InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–∞–π—Ç", callback_data="add_website"))
        kb_.add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="return_to_settings"))

        bot.edit_message_text("üåê –°–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã—Ö —Å–∞–π—Ç–æ–≤:", call.message.chat.id, call.message.message_id, reply_markup=kb_)

    @bot.callback_query_handler(func=lambda call: call.data == "add_website")
    def add_website_prompt(call: types.CallbackQuery):
        msg_ = bot.edit_message_text("–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, example.com):", call.message.chat.id, call.message.message_id)
        bot.register_next_step_handler(msg_, process_add_website)

    def process_add_website(message: types.Message):
        new_site = message.text.strip()
        add_website(message, new_site)
        kb_ = InlineKeyboardMarkup()
        kb_.add(InlineKeyboardButton("üîô –ö –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", callback_data="return_to_settings"))
        bot.send_message(message.chat.id, "üîô –í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è.", reply_markup=kb_)

    @bot.callback_query_handler(func=lambda call: call.data.startswith("delete_website_"))
    def remove_website_prompt(call: types.CallbackQuery):
        site_to_remove = call.data.split("_", 2)[2]
        valid_links = load_valid_links()
        if site_to_remove in valid_links:
            valid_links.remove(site_to_remove)
            save_valid_links(valid_links)
            bot.edit_message_text(f"‚úÖ –°–∞–π—Ç {site_to_remove} —É–¥–∞–ª—ë–Ω –∏–∑ —Å–ø–∏—Å–∫–∞.", call.message.chat.id, call.message.message_id)
        else:
            bot.edit_message_text(f"‚ùå –°–∞–π—Ç {site_to_remove} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ.", call.message.chat.id, call.message.message_id)
        manage_websites(call)

    @bot.callback_query_handler(func=lambda call: call.data == "delete_all_lots")
    def delete_all_lots_prompt(call: types.CallbackQuery):
        kb = InlineKeyboardMarkup()
        kb.add(
            InlineKeyboardButton("‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data="confirm_delete_all_lots"),
            InlineKeyboardButton("‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∏—Ç—å", callback_data="return_to_settings")
        )
        bot.edit_message_text("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≤—Å–µ –ª–æ—Ç—ã?", call.message.chat.id, call.message.message_id, reply_markup=kb)

    @bot.callback_query_handler(func=lambda call: call.data == "confirm_delete_all_lots")
    def confirm_delete_all_lots(call: types.CallbackQuery):
        delete_all_lots_func(call)
        kb = InlineKeyboardMarkup()
        kb.add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="return_to_settings"))
        bot.edit_message_text("‚úÖ –í—Å–µ –ª–æ—Ç—ã —É–¥–∞–ª–µ–Ω—ã.", call.message.chat.id, call.message.message_id, reply_markup=kb)

    @bot.callback_query_handler(func=lambda call: call.data == "lot_settings")
    def lot_settings(call: types.CallbackQuery):
        kb = InlineKeyboardMarkup(row_width=1)
        kb.add(InlineKeyboardButton("üîç –ü–æ–∏—Å–∫ –ª–æ—Ç–∞", callback_data="search_lot"))
        kb.add(InlineKeyboardButton("üìã –°–ø–∏—Å–æ–∫ –ª–æ—Ç–æ–≤", callback_data="show_lots_list"))
        kb.add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="return_to_settings"))
        bot.edit_message_text("üì¶ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ª–æ—Ç–∞–º–∏:", call.message.chat.id, call.message.message_id, reply_markup=kb)

    @bot.callback_query_handler(func=lambda call: call.data == "show_lots_list")
    def show_lots_list(call: types.CallbackQuery):
        bot.edit_message_text("üìã –í—ã–±–µ—Ä–∏—Ç–µ –ª–æ—Ç:", call.message.chat.id, call.message.message_id, reply_markup=generate_lots_keyboard(0))

    @bot.callback_query_handler(func=lambda call: call.data == "search_lot")
    def search_lot_prompt(call: types.CallbackQuery):
        kb = InlineKeyboardMarkup()
        kb.add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="lot_settings"))
        msg = bot.edit_message_text("üîç –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–ª–∏ —á–∞—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è –ª–æ—Ç–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞:", 
                                    call.message.chat.id, call.message.message_id, reply_markup=kb)
        bot.register_next_step_handler(msg, process_lot_search)

    def process_lot_search(message: types.Message):
        search_term = message.text.strip().lower()
        if not search_term:
            kb = InlineKeyboardMarkup()
            kb.add(InlineKeyboardButton("üîô –ö –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º –ª–æ—Ç–æ–≤", callback_data="lot_settings"))
            bot.send_message(message.chat.id, "‚ùå –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.", reply_markup=kb)
            return
            
        cfg = load_config()
        lot_map = cfg.get("lot_mapping", {})
        
        found_lots = {}
        for lot_key, lot_data in lot_map.items():
            lot_name = lot_data["name"].lower()
            if search_term in lot_name:
                found_lots[lot_key] = lot_data
                
        if not found_lots:
            kb = InlineKeyboardMarkup()
            kb.add(InlineKeyboardButton("üîÑ –ù–æ–≤—ã–π –ø–æ–∏—Å–∫", callback_data="search_lot"))
            kb.add(InlineKeyboardButton("üîô –ö –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º –ª–æ—Ç–æ–≤", callback_data="lot_settings"))
            bot.send_message(message.chat.id, f"‚ùå –õ–æ—Ç—ã —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º '{search_term}' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.", reply_markup=kb)
            return
            
        kb = InlineKeyboardMarkup(row_width=1)
        for lot_key, lot_data in found_lots.items():
            name_ = lot_data["name"]
            sid_ = lot_data["service_id"]
            qty_ = lot_data["quantity"]
            snum_ = lot_data.get("service_number", 1)
            btn_text = f"{name_} [ID={sid_}, Q={qty_}, S={snum_}]"
            cd_ = f"edit_lot_{lot_key}"
            kb.add(InlineKeyboardButton(btn_text, callback_data=cd_))
            
        kb.add(InlineKeyboardButton("üîÑ –ù–æ–≤—ã–π –ø–æ–∏—Å–∫", callback_data="search_lot"))
        kb.add(InlineKeyboardButton("üîô –ö –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º –ª–æ—Ç–æ–≤", callback_data="lot_settings"))
        bot.send_message(message.chat.id, f"üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –¥–ª—è '{search_term}':", reply_markup=kb)

    @bot.callback_query_handler(func=lambda call: call.data.startswith("edit_lot_"))
    def edit_lot_callback(call: types.CallbackQuery):
        lot_key = call.data.split("_", 2)[2]
        edit_lot(call, lot_key)

    @bot.callback_query_handler(func=lambda call: call.data.startswith("prev_page_") or call.data.startswith("next_page_"))
    def page_navigation(call: types.CallbackQuery):
        try:
            page_ = int(call.data.split("_")[-1])
        except ValueError:
            page_ = 0
        bot.edit_message_text("üìã –í—ã–±–µ—Ä–∏—Ç–µ –ª–æ—Ç:", call.message.chat.id, call.message.message_id, reply_markup=generate_lots_keyboard(page_))

    @bot.callback_query_handler(func=lambda call: call.data == "show_orders")
    def show_orders(call: types.CallbackQuery):
        stats = get_statistics()
        if not stats:
            kb = InlineKeyboardMarkup()
            kb.add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="return_to_settings"))
            bot.edit_message_text("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –∑–∞–∫–∞–∑–∞—Ö.", call.message.chat.id, call.message.message_id, reply_markup=kb)
            return

        kb = InlineKeyboardMarkup()
        kb.add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="return_to_settings"))

        text = f"""
üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–∞—Ö SMM

–ó–∞ 24 —á–∞—Å–∞: {stats['day_orders']} –∑–∞–∫–∞–∑–æ–≤ –Ω–∞ {stats['day_total']} —Ä—É–±.
–ó–∞ –Ω–µ–¥–µ–ª—é: {stats['week_orders']} –∑–∞–∫–∞–∑–æ–≤ –Ω–∞ {stats['week_total']} —Ä—É–±.
–ó–∞ –º–µ—Å—è—Ü: {stats['month_orders']} –∑–∞–∫–∞–∑–æ–≤ –Ω–∞ {stats['month_total']} —Ä—É–±.
–ó–∞ –≤—Å—ë –≤—Ä–µ–º—è: {stats['all_time_orders']} –∑–∞–∫–∞–∑–æ–≤ –Ω–∞ {stats['all_time_total']} —Ä—É–±.
        """.strip()

        try:
            bot.edit_message_text(text, call.message.chat.id, call.message.message_id, parse_mode='HTML', reply_markup=kb)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            bot.send_message(call.message.chat.id, text, parse_mode='HTML', reply_markup=kb)
        
        bot.answer_callback_query(call.id)

    @bot.callback_query_handler(func=lambda call: call.data == "upload_lots_json")
    def upload_lots_json(call: types.CallbackQuery):
        user_id = call.from_user.id
        waiting_for_lots_upload.add(user_id)
        logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤ waiting_for_lots_upload: {waiting_for_lots_upload}")
        bot.edit_message_text("–ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–∞–π–ª JSON (–º–æ–∂–Ω–æ –ª—é–±—ã–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º).", call.message.chat.id, call.message.message_id)

    @bot.callback_query_handler(func=lambda call: call.data == "export_files")
    def export_files(call: types.CallbackQuery):
        chat_id_ = call.message.chat.id
        files_to_send = [CONFIG_PATH, ORDERS_PATH, ORDERS_DATA_PATH]
        for f_ in files_to_send:
            if os.path.exists(f_):
                try:
                    with open(f_, 'rb') as ff:
                        bot.send_document(chat_id_, ff, caption=f"–§–∞–π–ª: {os.path.basename(f_)}")
                except Exception as e:
                    bot.send_message(chat_id_, f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ {f_}: {e}")
            else:
                bot.send_message(chat_id_, f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {f_}")
        bot.answer_callback_query(call.id)

    @bot.callback_query_handler(func=lambda call: call.data == "export_errors")
    def export_errors(call: types.CallbackQuery):
        chat_id_ = call.message.chat.id
        if os.path.exists(LOG_PATH):
            try:
                with open(LOG_PATH, 'rb') as f:
                    bot.send_document(chat_id_, f, caption="üìã –õ–æ–≥ –æ—à–∏–±–æ–∫")
                bot.edit_message_text("üìã –õ–æ–≥–∏ –≤—ã–≥—Ä—É–∂–µ–Ω—ã.", chat_id_, call.message.message_id)
            except Exception as e:
                bot.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ª–æ–≥-—Ñ–∞–π–ª–∞: {e}", chat_id_, call.message.message_id)
        else:
            bot.edit_message_text("‚ùå –õ–æ–≥-—Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.", chat_id_, call.message.message_id)

    @bot.callback_query_handler(func=lambda call: call.data == "delete_orders")
    def delete_orders(call: types.CallbackQuery):
        if os.path.exists(ORDERS_PATH):
            os.remove(ORDERS_PATH)
        if os.path.exists(ORDERS_DATA_PATH):
            os.remove(ORDERS_DATA_PATH)
        bot.edit_message_text("üóëÔ∏è –§–∞–π–ª—ã –∑–∞–∫–∞–∑–æ–≤ —É–¥–∞–ª–µ–Ω—ã.", call.message.chat.id, call.message.message_id)
        files_menu(call)

    @bot.callback_query_handler(func=lambda call: call.data == "toggle_auto_refunds")
    def toggle_auto_refunds(call: types.CallbackQuery):
        cfg = load_config()
        ar_ = cfg.get("auto_refunds", True)
        cfg["auto_refunds"] = not ar_
        save_config(cfg)
        bot.answer_callback_query(call.id, f"‚úÖ –ê–≤—Ç–æ–≤–æ–∑–≤—Ä–∞—Ç—ã: {'–í–ö–õ' if cfg['auto_refunds'] else '–í–´–ö–õ'}")
        misc_settings(call)

    @bot.callback_query_handler(func=lambda call: call.data == "toggle_confirm_link")
    def toggle_confirm_link(call: types.CallbackQuery):
        cfg = load_config()
        confirm_link = cfg.get("confirm_link", True)
        cfg["confirm_link"] = not confirm_link
        save_config(cfg)
        bot.answer_callback_query(call.id, f"‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∏: {'–í–ö–õ' if cfg['confirm_link'] else '–í–´–ö–õ'}")
        misc_settings(call)

    @bot.callback_query_handler(func=lambda call: call.data == "toggle_send_auto_lots")
    def toggle_send_auto_lots(call: types.CallbackQuery):
        cfg = load_config()
        current_value = cfg.get("send_auto_lots", True)
        cfg["send_auto_lots"] = not current_value
        save_config(cfg)
        bot.answer_callback_query(call.id, f"üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ auto_lots.json {'–æ—Ç–∫–ª—é—á–µ–Ω–∞' if current_value else '–≤–∫–ª—é—á–µ–Ω–∞'}!")
        misc_settings(call)
        
    @bot.callback_query_handler(func=lambda call: call.data == "toggle_auto_start")
    def toggle_auto_start(call: types.CallbackQuery):
        cfg = load_config()
        current_value = cfg.get("auto_start", False)
        cfg["auto_start"] = not current_value
        save_config(cfg)
        bot.answer_callback_query(call.id, f"‚ö° –ê–≤—Ç–æ–∑–∞–ø—É—Å–∫ –ø–ª–∞–≥–∏–Ω–∞ {'–æ—Ç–∫–ª—é—á–µ–Ω' if current_value else '–≤–∫–ª—é—á–µ–Ω'}!")
        misc_settings(call)

    @bot.callback_query_handler(func=lambda call: call.data == "change_send_interval")
    def change_send_interval(call: types.CallbackQuery):
        cfg = load_config()
        current_interval = cfg.get("send_auto_lots_interval", 30)
        
        kb_ = InlineKeyboardMarkup()
        kb_.add(InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥", callback_data="cancel_interval_change"))
        
        msg_ = bot.edit_message_text(f"‚è±Ô∏è –¢–µ–∫—É—â–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –æ—Ç–ø—Ä–∞–≤–∫–∏: {current_interval} –º–∏–Ω—É—Ç\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –æ—Ç–ø—Ä–∞–≤–∫–∏ auto_lots.json –≤ –º–∏–Ω—É—Ç–∞—Ö (–æ—Ç 5 –¥–æ 1440):", 
                                call.message.chat.id, call.message.message_id, reply_markup=kb_)
        bot.register_next_step_handler(msg_, process_send_interval_change)

    @bot.callback_query_handler(func=lambda call: call.data == "cancel_interval_change")
    def cancel_interval_change(call: types.CallbackQuery):
        bot.clear_step_handler_by_chat_id(call.message.chat.id)
        misc_settings(call)
    
    def process_send_interval_change(message: types.Message):
        try:
            new_interval = int(message.text.strip())
            if new_interval < 5:
                bot.send_message(message.chat.id, "‚ùå –ò–Ω—Ç–µ—Ä–≤–∞–ª –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ 5 –º–∏–Ω—É—Ç")
                return
            if new_interval > 1440:
                bot.send_message(message.chat.id, "‚ùå –ò–Ω—Ç–µ—Ä–≤–∞–ª –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ 1440 –º–∏–Ω—É—Ç (24 —á–∞—Å–∞)")
                return
                
            cfg = load_config()
            cfg["send_auto_lots_interval"] = new_interval
            save_config(cfg)
            
            kb_ = InlineKeyboardMarkup()
            kb_.add(InlineKeyboardButton("üîô –ö –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", callback_data="misc_settings"))
            bot.send_message(message.chat.id, f"‚úÖ –ò–Ω—Ç–µ—Ä–≤–∞–ª –æ—Ç–ø—Ä–∞–≤–∫–∏ auto_lots.json —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {new_interval} –º–∏–Ω—É—Ç", reply_markup=kb_)
        except ValueError:
            bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞: –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –º–∏–Ω—É—Ç.")
            
    @bot.callback_query_handler(func=lambda call: call.data == "return_to_settings")
    def return_to_settings(call: types.CallbackQuery):
        smm_settings(call)

    @bot.callback_query_handler(func=lambda call: call.data == "return_to_lots")
    def return_to_lots(call: types.CallbackQuery):
        bot.edit_message_text("üìã –í—ã–±–µ—Ä–∏—Ç–µ –ª–æ—Ç:", call.message.chat.id, call.message.message_id, reply_markup=generate_lots_keyboard(0))

    @bot.callback_query_handler(func=lambda call: call.data.startswith("change_name_"))
    def change_name(call: types.CallbackQuery):
        lot_key = call.data.split("_", 2)[2]
        msg_ = bot.edit_message_text(f"‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è {lot_key}:", call.message.chat.id, call.message.message_id)
        bot.register_next_step_handler(msg_, process_name_change, lot_key)

    @bot.callback_query_handler(func=lambda call: call.data == "add_new_lot")
    def add_new_lot(call: types.CallbackQuery):
        bot.delete_message(call.message.chat.id, call.message.message_id)
        msg_ = bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ ID –ª–æ—Ç–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:")
        bot.register_next_step_handler(msg_, process_new_lot_id_step)

    @bot.callback_query_handler(func=lambda call: call.data.startswith("change_id_"))
    def change_id(call: types.CallbackQuery):
        lot_key = call.data.split("_", 2)[2]
        msg_ = bot.edit_message_text(f"üÜî –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π ID —É—Å–ª—É–≥–∏ –¥–ª—è {lot_key}:", call.message.chat.id, call.message.message_id)
        bot.register_next_step_handler(msg_, process_id_change, lot_key)

    @bot.callback_query_handler(func=lambda call: call.data.startswith("change_quantity_"))
    def change_quantity(call: types.CallbackQuery):
        lot_key = call.data.split("_", 2)[2]
        msg_ = bot.edit_message_text(f"üî¢ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è {lot_key}:", call.message.chat.id, call.message.message_id)
        bot.register_next_step_handler(msg_, process_quantity_change, lot_key)

    @bot.callback_query_handler(func=lambda call: call.data.startswith("change_snum_"))
    def change_snum(call: types.CallbackQuery):
        lot_key = call.data.split("_", 2)[2]
        msg_ = bot.edit_message_text(f"üî¢ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å–µ—Ä–≤–∏—Å–∞ –¥–ª—è {lot_key}:", call.message.chat.id, call.message.message_id)
        bot.register_next_step_handler(msg_, process_service_num_change, lot_key)

    @bot.callback_query_handler(func=lambda call: call.data.startswith("delete_one_lot_"))
    def delete_one_lot_callback(call: types.CallbackQuery):
        lot_key = call.data.split("_", 3)[3]
        delete_one_lot(call, lot_key)

    @bot.callback_query_handler(func=lambda call: call.data == "api_settings")
    def api_settings_callback(call: types.CallbackQuery):
        api_settings_menu(call)

    @bot.callback_query_handler(func=lambda call: call.data.startswith("edit_apiurl_"))
    def edit_apiurl(call: types.CallbackQuery):
        idx_ = int(call.data.split("_")[-1])
        msg_ = bot.edit_message_text(f"üåê –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π URL –¥–ª—è —Å–µ—Ä–≤–∏—Å–∞ #{idx_}:", call.message.chat.id, call.message.message_id)
        bot.register_next_step_handler(msg_, process_apiurl_change, idx_)

    @bot.callback_query_handler(func=lambda call: call.data.startswith("edit_apikey_"))
    def edit_apikey(call: types.CallbackQuery):
        idx_ = int(call.data.split("_")[-1])
        msg_ = bot.edit_message_text(f"üîë –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∫–ª—é—á –¥–ª—è —Å–µ—Ä–≤–∏—Å–∞ #{idx_}:", call.message.chat.id, call.message.message_id)
        bot.register_next_step_handler(msg_, process_apikey_change, idx_)

    @bot.callback_query_handler(func=lambda call: call.data.startswith("check_balance_"))
    def check_balance(call: types.CallbackQuery):
        idx_ = int(call.data.split("_")[-1])
        check_balance_func(call, idx_)

    @bot.callback_query_handler(func=lambda call: call.data == "add_new_lot")
    def add_new_lot(call: types.CallbackQuery):
        bot.delete_message(call.message.chat.id, call.message.message_id)
        msg_ = bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ ID –ª–æ—Ç–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:")
        bot.register_next_step_handler(msg_, process_new_lot_id_step)

    @bot.callback_query_handler(func=lambda call: call.data == "update_lot_ids")
    def update_lot_ids(call: types.CallbackQuery):
        cfg = load_config()
        reindex_lots(cfg)
        bot.answer_callback_query(call.id, "üîÑ –ù–æ–º–µ—Ä–∞ –ª–æ—Ç–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω—ã.")
        misc_settings(call)

    @bot.callback_query_handler(func=lambda call: call.data == "edit_messages")
    def edit_messages_menu(call: types.CallbackQuery):
        cfg = load_config()
        msg_payment = cfg["messages"]["after_payment"]
        msg_confirmation = cfg["messages"]["after_confirmation"]

        text_ = f"""
‚öôÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π

<b>–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã:</b>

–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: https://teletype.in/@exfador/kT9IpmDNovR

<code>{msg_payment}</code>

<b>–ü–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏:</b>

–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: https://teletype.in/@exfador/kT9IpmDNovR

<code>{msg_confirmation}</code>
        """.strip()

        kb = InlineKeyboardMarkup(row_width=1)
        kb.add(
            InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã", callback_data="edit_msg_payment"),
            InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è", callback_data="edit_msg_confirmation")
        )
        kb.add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="return_to_settings"))

        bot.edit_message_text(text_, call.message.chat.id, call.message.message_id, parse_mode="HTML", reply_markup=kb)

    @bot.callback_query_handler(func=lambda call: call.data == "edit_msg_payment")
    def edit_msg_payment(call: types.CallbackQuery):
        msg_ = bot.edit_message_text("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã:", call.message.chat.id, call.message.message_id)
        bot.register_next_step_handler(msg_, process_message_payment_change)

    @bot.callback_query_handler(func=lambda call: call.data == "edit_msg_confirmation")
    def edit_msg_confirmation(call: types.CallbackQuery):
        msg_ = bot.edit_message_text("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è:", call.message.chat.id, call.message.message_id)
        bot.register_next_step_handler(msg_, process_message_confirmation_change)

    def process_message_payment_change(message: types.Message):
        new_text = message.text.strip()
        cfg = load_config()
        cfg["messages"]["after_payment"] = new_text
        save_config(cfg)
        kb = InlineKeyboardMarkup()
        kb.add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="return_to_settings"))
        bot.send_message(message.chat.id, "‚úÖ –¢–µ–∫—Å—Ç –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω.", reply_markup=kb)

    def process_message_confirmation_change(message: types.Message):
        new_text = message.text.strip()
        cfg = load_config()
        cfg["messages"]["after_confirmation"] = new_text
        save_config(cfg)
        kb = InlineKeyboardMarkup()
        kb.add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="return_to_settings"))
        bot.send_message(message.chat.id, "‚úÖ –¢–µ–∫—Å—Ç –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω.", reply_markup=kb)

    @bot.callback_query_handler(func=lambda call: call.data == "add_service")
    def add_service(call: types.CallbackQuery):
        msg_ = bot.edit_message_text("‚ûï –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –Ω–æ–≤–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞ (—á–∏—Å–ª–æ):", call.message.chat.id, call.message.message_id)
        bot.register_next_step_handler(msg_, process_add_service)

    @bot.callback_query_handler(func=lambda call: call.data == "delete_service")
    def delete_service(call: types.CallbackQuery):
        msg_ = bot.edit_message_text("‚ûñ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å–µ—Ä–≤–∏—Å–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", call.message.chat.id, call.message.message_id)
        bot.register_next_step_handler(msg_, process_delete_service)

    def process_add_service(message: types.Message):
        try:
            srv_num = int(message.text.strip())
            if srv_num < 1:
                raise ValueError("–ù–æ–º–µ—Ä —Å–µ—Ä–≤–∏—Å–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º")
        except Exception as e:
            bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
            return

        cfg = load_config()
        if str(srv_num) in cfg["services"]:
            bot.send_message(message.chat.id, f"‚ùå –°–µ—Ä–≤–∏—Å #{srv_num} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
            return

        cfg["services"][str(srv_num)] = {
            "api_url": "https://example.com/api/v2",
            "api_key": "YOUR_API_KEY"
        }
        save_config(cfg)
        kb_ = InlineKeyboardMarkup()
        kb_.add(InlineKeyboardButton("üîô –ö –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º API", callback_data="api_settings"))
        bot.send_message(message.chat.id, f"‚úÖ –°–µ—Ä–≤–∏—Å #{srv_num} –¥–æ–±–∞–≤–ª–µ–Ω. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –µ–≥–æ URL –∏ –∫–ª—é—á.", reply_markup=kb_)

    def process_delete_service(message: types.Message):
        try:
            srv_num = int(message.text.strip())
        except ValueError:
            bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞: –ù–æ–º–µ—Ä —Å–µ—Ä–≤–∏—Å–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
            return

        cfg = load_config()
        if str(srv_num) not in cfg["services"]:
            bot.send_message(message.chat.id, f"‚ùå –°–µ—Ä–≤–∏—Å #{srv_num} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
            return

        del cfg["services"][str(srv_num)]
        save_config(cfg)
        kb_ = InlineKeyboardMarkup()
        kb_.add(InlineKeyboardButton("üîô –ö –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º API", callback_data="api_settings"))
        bot.send_message(message.chat.id, f"‚úÖ –°–µ—Ä–≤–∏—Å #{srv_num} —É–¥–∞–ª–µ–Ω.", reply_markup=kb_)

    @bot.callback_query_handler(func=lambda call: call.data == "set_notification_chat_id")
    def set_notification_chat_id(call: types.CallbackQuery):
        msg_ = bot.edit_message_text(f"üîî –í–≤–µ–¥–∏—Ç–µ Chat ID –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, -1001234567890 –¥–ª—è –≥—Ä—É–ø–ø—ã –∏–ª–∏ –≤–∞—à ID, –≤–∞—à id: {call.message.chat.id}):", 
                                    call.message.chat.id, call.message.message_id)
        bot.register_next_step_handler(msg_, process_notification_chat_id)

    def process_notification_chat_id(message: types.Message):
        try:
            new_chat_id = int(message.text.strip())
            cfg = load_config()
            cfg["notification_chat_id"] = new_chat_id
            save_config(cfg)
            kb_ = InlineKeyboardMarkup()
            kb_.add(InlineKeyboardButton("üîô –ö –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", callback_data="return_to_settings"))
            bot.send_message(message.chat.id, f"‚úÖ Chat ID –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {new_chat_id}", reply_markup=kb_)
        except ValueError:
            bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞: –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π Chat ID (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ).")

    handlers_initialized = True
    auto_start_plugin(cardinal_instance)

def delayed_handlers_init():
    global handlers_initialized
    start_time = time.time()
    timeout = 60  # 60 —Å–µ–∫—É–Ω–¥
    while True:
        if time.time() - start_time > timeout:
            logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ Telegram: —Ç–∞–π–º–∞—É—Ç.")
            return

        if cardinal_instance is not None and cardinal_instance.telegram is not None and cardinal_instance.telegram.bot is not None:
            break
        time.sleep(1)

    init_telegram_handlers()

def init_commands(c_: Cardinal):
    global cardinal_instance
    logger.info("=== SMM Manager Initialization ===")

    cardinal_instance = c_
    
    threading.Thread(target=delayed_handlers_init, daemon=True).start()

def send_order_started_notification(c: Cardinal, order_id_funpay: str, twiboost_id: int, link: str, api_url: str, api_key: str, lot_price: float, real_amount: int):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –∑–∞–∫–∞–∑–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —á–∏—Å—Ç–æ–π –ø—Ä–∏–±—ã–ª–∏
    """
    cfg = load_config()
    notification_chat_id = cfg.get("notification_chat_id")
    if not notification_chat_id:
        logger.warning("Notification chat_id –Ω–µ –∑–∞–¥–∞–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.")
        return
        
    try:
        status_url = f"{api_url}?action=status&order={twiboost_id}&key={api_key}"
        status_resp = requests.get(status_url, timeout=10)
        status_resp.raise_for_status()
        status_data = status_resp.json()
        
        charge_ = status_data.get("charge", "0")
        try:
            spent_ = float(charge_)
        except ValueError:
            spent_ = 0.0

        order_url = f"https://funpay.com/orders/{order_id_funpay}/"
        order_data = c.account.get_order(order_id_funpay)
        buyer_username = order_data.buyer_username
        
        kb_ = InlineKeyboardMarkup()
        kb_.add(InlineKeyboardButton("üîó –ü–µ—Ä–µ–π—Ç–∏ –∫ –∑–∞–∫–∞–∑—É", url=order_url))
        
        notification_text = (
            f"üöÄ [AUTOSMM] –ó–∞–∫–∞–∑ #{order_id_funpay} –Ω–∞—á–∞—Ç!\n\n"
            f"üë§ –ü–æ–∫—É–ø–∞—Ç–µ–ª—å: {buyer_username}\n"
            f"üî¢ –ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: {order_id_funpay}\n"
            f"üí∞ –°—É–º–º–∞ –Ω–∞ FP: {lot_price} ‚ÇΩ\n"
            f"üí∏ –°–ø–∏—Å–∞–Ω–æ –≤ —Å–µ—Ä–≤–∏—Å–µ: {spent_} USD\n"
            f"üî¢ –ö–æ–ª-–≤–æ: {real_amount}\n"
            f"üîó –°—Å—ã–ª–∫–∞: {link}"
        )
        
        bot.send_message(
            notification_chat_id,
            notification_text,
            reply_markup=kb_
        )
        
    except Exception as ex:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –∑–∞–∫–∞–∑–∞: {ex}")

def process_link_without_confirmation(c: Cardinal, data: Dict):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å—Å—ã–ª–∫—É –±–µ–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–ª–∏ –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.
    """
    link_ = data["link"]
    service_id = data["service_id"]
    real_amount = data["real_amount"]
    order_id_funpay = data["order_id_funpay"]
    buyer_chat_id = data["chat_id"]
    service_number = data["service_number"]
    lot_price = data["price"]
    
    cfg = load_config()
    service_cfg = cfg["services"].get(str(service_number))
    if not service_cfg:
        logger.error(f"–ù–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–ª—è service_number={service_number}")
        c.send_message(buyer_chat_id, f"‚ùå –û—à–∏–±–∫–∞: –Ω–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–ª—è service_number={service_number}.")
        refund_order(c, order_id_funpay, buyer_chat_id, 
                    reason="–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.",
                    detailed_reason=f"–ù–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–ª—è service_number={service_number}.")
        return
    api_url = service_cfg["api_url"]
    api_key = service_cfg["api_key"]
    encoded_link = quote(link_, safe="")
    url_req = f"{api_url}?action=add&service={service_id}&link={encoded_link}&quantity={real_amount}&key={api_key}"

    try:
        resp_ = requests.get(url_req)
        resp_.raise_for_status()
        j_ = resp_.json()
        if "order" in j_:
            twiboost_id = j_["order"]
            chistota = float(lot_price)
            
            save_order_data(
                buyer_chat_id,
                order_id_funpay,
                twiboost_id,
                "pending",
                chistota,
                link_,
                real_amount,
                service_number
            )
            
            send_order_started_notification(
                c, 
                order_id_funpay, 
                twiboost_id, 
                link_, 
                api_url, 
                api_key, 
                lot_price, 
                real_amount
            )
            
            check_order_status(c, twiboost_id, buyer_chat_id, link_, order_id_funpay)

            msg_confirmation = cfg["messages"]["after_confirmation"].format(
                twiboost_id=twiboost_id,
                link=link_
            )
            c.send_message(buyer_chat_id, msg_confirmation)
            waiting_for_link.pop(str(order_id_funpay), None)
        else:
            error_msg = j_.get("error", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
            logger.error(f"–ù–µ—Ç 'order' –≤ –æ—Ç–≤–µ—Ç–µ: {j_}, –æ—à–∏–±–∫–∞: {error_msg}")
            refund_order(
                c,
                order_id_funpay,
                buyer_chat_id,
                reason="–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞.",
                detailed_reason=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞: {error_msg}"
            )

    except requests.exceptions.RequestException as req_ex:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞ #{order_id_funpay}: {req_ex}")
        refund_order(
            c,
            order_id_funpay,
            buyer_chat_id,
            reason="–°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞.",
            detailed_reason=f"–°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞: {req_ex}"
        )
    except ValueError as val_ex:
        logger.error(f"ValueError –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞ –∑–∞–∫–∞–∑–∞ #{order_id_funpay}: {val_ex}")
        refund_order(
            c,
            order_id_funpay,
            buyer_chat_id,
            reason="–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö.",
            detailed_reason=f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –æ—Ç API: {val_ex}"
        )
    except Exception as ex:
        logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞ #{order_id_funpay}: {ex}")
        refund_order(
            c,
            order_id_funpay,
            buyer_chat_id,
            reason="–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞.",
            detailed_reason=f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞: {ex}"
        )

def start_auto_lots_sender(c: Cardinal):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–∞–π–ª auto_lots.json –Ω–∞ –∑–∞–¥–∞–Ω–Ω—ã–π chat_id —Å –∑–∞–¥–∞–Ω–Ω–æ–π –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å—é
    """
    global RUNNING
    
    logger.info("–ó–∞–ø—É—Å–∫ –ø–æ—Ç–æ–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ auto_lots.json")
    
    while RUNNING:
        try:
            cfg = load_config()
            chat_id = cfg.get("notification_chat_id")
            send_auto_lots = cfg.get("send_auto_lots", True)
            interval_minutes = cfg.get("send_auto_lots_interval", 30)
            
            if chat_id and send_auto_lots and os.path.exists(CONFIG_PATH) and RUNNING:
                if c.telegram and c.telegram.bot:
                    try:
                        with open(CONFIG_PATH, 'rb') as file:
                            c.telegram.bot.send_document(
                                chat_id, 
                                file, 
                                caption=f"üìÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞ auto_lots.json\n\n‚è±Ô∏è –°–ª–µ–¥—É—é—â–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —á–µ—Ä–µ–∑ {interval_minutes} –º–∏–Ω—É—Ç"
                            )
                            logger.info(f"–§–∞–π–ª auto_lots.json –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ chat_id {chat_id}")
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ auto_lots.json: {e}")
            
            wait_time = interval_minutes * 60
            sleep_interval = 1
            
            for _ in range(wait_time):
                if not RUNNING:
                    break
                time.sleep(sleep_interval)
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –ø–æ—Ç–æ–∫–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ auto_lots.json: {e}")
            time.sleep(60)

def auto_start_plugin(c: Cardinal):
    """
    –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–ø—É—Å–∫ –ø–ª–∞–≥–∏–Ω–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ auto_start
    """
    cfg = load_config()
    auto_start = cfg.get("auto_start", False)
    
    if auto_start:
        logger.info("–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–ø—É—Å–∫ –ø–ª–∞–≥–∏–Ω–∞ SMM")
        global RUNNING, IS_STARTED, ORDER_CHECK_THREAD, AUTO_LOTS_SEND_THREAD
        RUNNING = True
        IS_STARTED = True
    
        if not ORDER_CHECK_THREAD or not ORDER_CHECK_THREAD.is_alive():
            ORDER_CHECK_THREAD = threading.Thread(target=start_order_checking, args=(c,))
            ORDER_CHECK_THREAD.daemon = True
            ORDER_CHECK_THREAD.start()
        
        if not AUTO_LOTS_SEND_THREAD or not AUTO_LOTS_SEND_THREAD.is_alive():
            AUTO_LOTS_SEND_THREAD = threading.Thread(target=start_auto_lots_sender, args=(c,))
            AUTO_LOTS_SEND_THREAD.daemon = True
            AUTO_LOTS_SEND_THREAD.start()
            
        logger.info("–ü–ª–∞–≥–∏–Ω SMM —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏")
        return True
    
    return False

BIND_TO_PRE_INIT = [init_commands]
BIND_TO_NEW_MESSAGE = [auto_smm_handler]
BIND_TO_NEW_ORDER = [auto_smm_handler]
BIND_TO_DELETE = []