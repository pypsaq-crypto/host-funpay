from __future__ import annotations
import json
from threading import Thread
from typing import TYPE_CHECKING
from Utils import cardinal_tools
from locales.localizer import Localizer

if TYPE_CHECKING:
    from cardinal import Cardinal
from FunPayAPI.updater.events import *
import tg_bot.static_keyboards
from os.path import exists
from tg_bot import CBT
from telebot.types import InlineKeyboardMarkup as K, InlineKeyboardButton as B
import telebot
import logging

NAME = "Status Plugin"
VERSION = "0.0.4"
DESCRIPTION = "–î–æ–±–∞–≤–ª—è–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å —Å—Ç–∞—Ç—É—Å, –∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º FunPay –ø–æ –∫–æ–º–∞–Ω–¥–µ \"#status\" —Å–º–æ—Ç—Ä–µ—Ç—å –µ–≥–æ " \
              "–∏ –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è (—Å–æ–æ–±—â–µ–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ —á–µ–ª–æ–≤–µ–∫–æ–º). "

CREDITS = "@sidor0912"
UUID = "03869c57-ddcc-49a6-8642-8319640323bd"
SETTINGS_PAGE = True
logger = logging.getLogger("FPC.status_plugin")
LOGGER_PREFIX = "[STATUS PLUGIN]"
last_action_time = time.time()
SETTINGS = {
    "statuses": list(),
    "status": "",
    "time": time.time(),
    "greetings": False
}
CBT_TEXT_ADD_STATUS = "STATUS_PLUGIN_ADD_STATUS"
CBT_DELETE_STATUS = "STATUS_PLUGIN_DEL_STATUS"
CBT_GREETINGS = "STATUS_PLUGIN_GREETINGS_STATUS"
localizer = Localizer()
_ = localizer.translate


def time_to_str(seconds):
    seconds = int(seconds)
    days = seconds // (24 * 3600)
    days = f"{days} –¥–Ω. " if days else ""
    seconds = seconds % (24 * 3600)
    hours = seconds // (3600)
    hours = f"{hours} —á. " if hours else ""
    seconds = seconds % (3600)
    minutes = seconds // (60)
    minutes = f"{minutes} –º–∏–Ω. " if minutes else ""
    seconds = seconds % (60)
    seconds = f"{seconds} —Å–µ–∫. " if seconds else ""
    result = f"{days}{hours}{minutes}{seconds}".strip()
    return result if result else "0 —Å–µ–∫."


def new_greetings_handler(c: Cardinal, e: NewMessageEvent | LastChatMessageChangedEvent):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
    """

    if not c.MAIN_CFG["Greetings"].getboolean("sendGreetings"):
        return
    if not c.old_mode_enabled:
        if isinstance(e, LastChatMessageChangedEvent):
            return
        obj = e.message
        chat_id, chat_name, mtype, its_me, badge = obj.chat_id, obj.chat_name, obj.type, obj.author_id == c.account.id, obj.badge
    else:
        obj = e.chat
        chat_id, chat_name, mtype, its_me, badge = obj.id, obj.name, obj.last_message_type, not obj.unread, None

    if any([chat_id in c.old_users, its_me, mtype == MessageTypes.DEAR_VENDORS, badge is not None,
            (mtype is not MessageTypes.NON_SYSTEM and c.MAIN_CFG["Greetings"].getboolean("ignoreSystemMessages"))]):
        return

    logger.info(_("log_sending_greetings", chat_name, chat_id))
    text = cardinal_tools.format_msg_text(c.MAIN_CFG["Greetings"]["greetingsText"], obj)
    status_t = time.time() - SETTINGS["time"]
    last = time.time() - last_action_time
    logger.info(f"[STATUS] –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ –ø–ª–∞–≥–∏–Ω–æ–º Status Plugin")
    Thread(target=c.send_message,
           args=(chat_id, text + f"\n\nüö¶ –°—Ç–∞—Ç—É—Å: {SETTINGS['status']} (—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω {time_to_str(status_t)} –Ω–∞–∑–∞–¥)\n"
                                 f"‚åõ –ü–æ—Å–ª–µ–¥–Ω–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ: {time_to_str(last)} –Ω–∞–∑–∞–¥", chat_name), daemon=True).start()


def activate_plugin(c: Cardinal, *args):
    global handlers
    for i, f in enumerate(c.last_chat_message_changed_handlers):
        if f.__name__ == "greetings_handler" and f.__module__ == "handlers" and f.plugin_uuid is None:
            c.last_chat_message_changed_handlers[i] = new_greetings_handler
            c.last_chat_message_changed_handlers[i].plugin_uuid = UUID
    for i, f in enumerate(c.new_message_handlers):
        if f.__name__ == "greetings_handler" and f.__module__ == "handlers" and f.plugin_uuid is None:
            c.new_message_handlers[i] = new_greetings_handler
            c.new_message_handlers[i].plugin_uuid = UUID


def init(cardinal: Cardinal):
    tg = cardinal.telegram
    bot = tg.bot

    if exists("storage/plugins/statuses_plugin_settings.json"):
        with open("storage/plugins/statuses_plugin_settings.json", "r", encoding="utf-8") as f:
            global SETTINGS
            settings = json.loads(f.read())
            SETTINGS.update(settings)

    def save_config():
        with open("storage/plugins/statuses_plugin_settings.json", "w", encoding="utf-8") as f:
            global SETTINGS
            f.write(json.dumps(SETTINGS, indent=4, ensure_ascii=False))

    def open_settings(call: telebot.types.CallbackQuery):
        keyboard = K()
        keyboard.add(B(f"{'üü¢' if SETTINGS['greetings'] else 'üî¥'} –ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å –≤ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–∏",
                       callback_data=CBT_GREETINGS))
        statuses = ""
        for i, el in enumerate(SETTINGS["statuses"]):
            statuses += f"/status{i} - {el}\n"
            keyboard.add(B(f"üóëÔ∏è {i}) {el}", callback_data=f"{CBT_DELETE_STATUS}:{i}"))
        keyboard.add(B("–î–æ–±–∞–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å", callback_data=f"{CBT_TEXT_ADD_STATUS}:"))
        keyboard.add(B("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"{CBT.EDIT_PLUGIN}:{UUID}:0"))
        bot.edit_message_text(f"–í –¥–∞–Ω–Ω–æ–º —Ä–∞–∑–¥–µ–ª–µ –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Å—Ç–∞—Ç—É—Å.\n\n{statuses}", call.message.chat.id,
                              call.message.id, reply_markup=keyboard)
        bot.answer_callback_query(call.id)

    def add_status(call: telebot.types.CallbackQuery):
        result = bot.send_message(call.message.chat.id,
                                  f"–í–≤–µ–¥–∏—Ç–µ —Å—Ç–∞—Ç—É—Å –¥–ª—è –¥–æ–±–∞–≤–ª—è–Ω–∏—è.",
                                  reply_markup=tg_bot.static_keyboards.CLEAR_STATE_BTN())
        tg.set_state(call.message.chat.id, result.id, call.from_user.id, CBT_TEXT_ADD_STATUS, {})
        bot.answer_callback_query(call.id)

    def del_status(call: telebot.types.CallbackQuery):
        try:
            id = int(call.data.split(":")[-1])
            el = SETTINGS["statuses"].pop(id)
            save_config()
            bot.send_message(
                text=f"üóëÔ∏è –°—Ç–∞—Ç—É—Å —É–¥–∞–ª–µ–Ω: {el}\n–ò—Å–ø–æ–ª—å–∑—É–π /restart –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤ –≤ –ø–æ–¥—Å–∫–∞–∑–∫–∞—Ö –∫–æ–º–∞–Ω–¥ Telegram.",
                chat_id=call.message.chat.id)
        except:
            logger.debug(f"{LOGGER_PREFIX} –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞.")
            logger.debug(f"TRACEBACK", exc_info=True)
        open_settings(call)

    def edited(message: telebot.types.Message):
        text = message.text

        tg.clear_state(message.chat.id, message.from_user.id, True)
        keyboard = K() \
            .row(B("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"{CBT.PLUGIN_SETTINGS}:{UUID}"))
        SETTINGS['statuses'].append(text)
        save_config()
        i = len(SETTINGS['statuses']) - 1
        cardinal.add_telegram_commands(UUID, [
            (f"status{i}", text, True),
        ])
        bot.reply_to(message, f"‚úÖ –î–∞–±–∞–≤–ª–µ–Ω —Å—Ç–∞—Ç—É—Å:\n/status{i} - {text}", reply_markup=keyboard)

    def edit_status(message: telebot.types.Message):
        global last_action_time
        last_action_time = time.time()
        text = message.text
        try:
            if len(text.split(" ")) == 1:
                num = int(text.split("@")[0].replace("/status", ""))
                SETTINGS["status"] = SETTINGS["statuses"][num]

            else:
                status = text.split(" ", 1)[-1]
                SETTINGS["status"] = status
            SETTINGS["time"] = time.time()
            save_config()
            bot.send_message(text=f"–°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω: {SETTINGS['status']}", chat_id=message.chat.id)

        except:
            logger.debug(f"{LOGGER_PREFIX} –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞.")
            logger.debug(f"TRACEBACK", exc_info=True)
            bot.send_message(text="–°—Ç–∞—Ç—É—Å –Ω–µ –∏–∑–º–µ–Ω–µ–Ω. –ö–æ–º–∞–Ω–¥–∞ –≤–≤–µ–¥–µ–Ω–∞ –Ω–µ–≤–µ—Ä–Ω–æ –∏–ª–∏ —ç–ª–µ–º–µ–Ω—Ç –∑–∞ –≥—Ä–∞–Ω–∏—Ü–µ–π —Å–ø–∏—Å–∫–∞",
                             chat_id=message.chat.id)

    def change_greetings(call: telebot.types.CallbackQuery):
        SETTINGS["greetings"] = not SETTINGS["greetings"]
        save_config()
        if SETTINGS["greetings"]:
            activate_plugin(cardinal)
        else:
            bot.answer_callback_query(call.id, "–£—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /restart",
                                      show_alert=True)
        open_settings(call)

    tg.msg_handler(edited, func=lambda m: tg.check_state(m.chat.id, m.from_user.id, CBT_TEXT_ADD_STATUS))
    tg.cbq_handler(add_status, lambda c: f"{CBT_TEXT_ADD_STATUS}" in c.data)
    tg.cbq_handler(change_greetings, lambda c: f"{CBT_GREETINGS}" in c.data)
    tg.cbq_handler(del_status, lambda c: f"{CBT_DELETE_STATUS}:" in c.data)
    for i, el in enumerate(SETTINGS["statuses"]):
        cardinal.add_telegram_commands(UUID, [
            (f"status{i}", el, True),
        ])
    cardinal.add_telegram_commands(UUID, [
        (f"status", "–ü—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å", True),
    ])
    tg.msg_handler(edit_status, func=lambda m: m.text.startswith("/status"))
    tg.cbq_handler(open_settings, lambda c: f"{CBT.PLUGIN_SETTINGS}:{UUID}" in c.data)
    if SETTINGS["greetings"]:
        activate_plugin(cardinal)


def message_hook(c: Cardinal, e: NewMessageEvent):
    if (not e.message.by_bot or hasattr(e,
                                        "sync_ignore")) and e.message.author_id == c.account.id and e.message.badge is None:
        global last_action_time
        last_action_time = time.time()
    if e.message.text is not None and e.message.text == "#status":
        if e.message.author in c.blacklist and c.bl_response_enabled:
            return
        status_t = time.time() - SETTINGS["time"]
        last = time.time() - last_action_time
        c.send_message(chat_id=e.message.chat_id,
                       message_text=f"üö¶ –°—Ç–∞—Ç—É—Å: {SETTINGS['status']} (—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω {time_to_str(status_t)} –Ω–∞–∑–∞–¥)\n"
                                    f"‚åõ –ü–æ—Å–ª–µ–¥–Ω–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ: {time_to_str(last)} –Ω–∞–∑–∞–¥")


BIND_TO_PRE_INIT = [init]
BIND_TO_NEW_MESSAGE = [message_hook]
BIND_TO_DELETE = None
