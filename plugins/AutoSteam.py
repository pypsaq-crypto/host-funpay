from __future__ import annotations
import json
import time
import requests
import uuid
import re
import logging
import threading
from queue import Queue
from typing import TYPE_CHECKING
from os.path import exists
import telebot
from telebot.types import InlineKeyboardMarkup as K, InlineKeyboardButton as B
from FunPayAPI.updater.events import NewMessageEvent
from FunPayAPI.types import OrderStatuses, SubCategoryTypes
from FunPayAPI.common import exceptions
import tg_bot
from tg_bot import CBT
from bs4 import BeautifulSoup
import os
import datetime

if TYPE_CHECKING:
    from cardinal import Cardinal

logger = logging.getLogger("FPC.auto_steam_top_up_plugin")
LOGGER_PREFIX = "[AUTOSTEAM PLUGIN]"

NAME = "Auto Steam"
VERSION = "2.0"
DESCRIPTION = "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ Steam —á–µ—Ä–µ–∑ API NSGifts"
CREDITS = "@StockHostBot | @wormdcShop_bot "
UUID = "1db83dd6-71bf-49e0-b660-773add7a3100"
SETTINGS_PAGE = True

PLUGIN_DIR = "storage/plugins/steam_auto_top_up"
os.makedirs(PLUGIN_DIR, exist_ok=True)

SETTINGS_FILE = os.path.join(PLUGIN_DIR, "settings.json")
ORDERS_FILE = os.path.join(PLUGIN_DIR, "orders.json")
BLACK_LIST_FILE = os.path.join(PLUGIN_DIR, "black_list_users.json")

SETTINGS = {
    "lot_currency": {},
    "api_login": "",
    "api_password": "",
    "auto_refund_on_error": True,
    "notification_chats": [],
    "notifications_enabled": True,
    "notification_types": {"success": True, "error": True, "refund": True, "balance": True},
    "confirmation_reminder": True,
    "reminder_time": 2.5,
    "deactivate_lots_on_insufficient_funds": True,
    "balance_threshold": 30.0,
    "low_balance_notified": False,
    "auto_response_on_arbitrage": True,
    "order_verification_enabled": True
}

TOKEN_DATA = {"token": None, "expiry": 0}
FUNPAY_STATES = {}
USER_ORDER_QUEUES = {}
SUCCESSFUL_ORDERS = {}
previous_balance = None

tg = None
bot = None
cardinal_instance = None

MIN_AMOUNTS = {"RUB": 25, "UAH": 10, "KZT": 70}

def verify_order_exists(cardinal: Cardinal, order_id: str) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∑–∞–∫–∞–∑ –Ω–∞ —Å–∞–º–æ–º –¥–µ–ª–µ.
    
    :param cardinal: –≠–∫–∑–µ–º–ø–ª—è—Ä Cardinal
    :param order_id: ID –∑–∞–∫–∞–∑–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    :return: True –µ—Å–ª–∏ –∑–∞–∫–∞–∑ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø—Ä–æ–¥–∞–≤—Ü—É, False –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ
    """
    try:
        # –£–±–∏—Ä–∞–µ–º —Å–∏–º–≤–æ–ª # –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
        clean_order_id = order_id.replace("#", "")
        
        # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∑–∞–∫–∞–∑ —á–µ—Ä–µ–∑ API
        order = cardinal.account.get_order(clean_order_id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç —Ç–µ–∫—É—â–µ–º—É –ø—Ä–æ–¥–∞–≤—Ü—É
        if order.seller_id == cardinal.account.id:
            logger.info(f"{LOGGER_PREFIX} –ó–∞–∫–∞–∑ #{clean_order_id} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –∫–∞–∫ –ø–æ–¥–ª–∏–Ω–Ω—ã–π")
            return True
        else:
            logger.warning(f"{LOGGER_PREFIX} –ó–∞–∫–∞–∑ #{clean_order_id} –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø—Ä–æ–¥–∞–≤—Ü—É (–ø—Ä–æ–¥–∞–≤–µ—Ü: {order.seller_id}, —Ç–µ–∫—É—â–∏–π: {cardinal.account.id})")
            return False
            
    except exceptions.UnauthorizedError:
        logger.error(f"{LOGGER_PREFIX} –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∑–∞–∫–∞–∑–∞ #{order_id}")
        return False
    except exceptions.RequestFailedError as e:
        logger.error(f"{LOGGER_PREFIX} –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∑–∞–∫–∞–∑–∞ #{order_id}: {e.short_str()}")
        return False
    except Exception as e:
        logger.error(f"{LOGGER_PREFIX} –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∑–∞–∫–∞–∑–∞ #{order_id}: {e}")
        return False

def extract_order_id_from_message(message_text: str) -> str | None:
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç ID –∑–∞–∫–∞–∑–∞ –∏–∑ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è.
    
    :param message_text: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    :return: ID –∑–∞–∫–∞–∑–∞ –∏–ª–∏ None –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω
    """
    # –ò—â–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω #XXXXXXX –≤ —Ç–µ–∫—Å—Ç–µ
    match = re.search(r'#([A-Z0-9]+)', message_text)
    if match:
        return match.group(1)
    return None

def load_settings():
    global SETTINGS
    if exists(SETTINGS_FILE):
        with open(SETTINGS_FILE, "r", encoding="utf-8") as f:
            SETTINGS.update(json.load(f))

def save_settings():
    with open(SETTINGS_FILE, "w", encoding="utf-8") as f:
        json.dump(SETTINGS, f, indent=4, ensure_ascii=False)

def load_orders():
    if exists(ORDERS_FILE):
        with open(ORDERS_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    return []

def save_orders(orders):
    with open(ORDERS_FILE, "w", encoding="utf-8") as f:
        json.dump(orders, f, indent=4, ensure_ascii=False)

def load_black_list():
    if exists(BLACK_LIST_FILE):
        with open(BLACK_LIST_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    return []

def save_black_list(black_list):
    with open(BLACK_LIST_FILE, "w", encoding="utf-8") as f:
        json.dump(black_list, f, indent=4, ensure_ascii=False)

def get_balance():
    try:
        token = get_token()
        response = requests.post("https://api.ns.gifts/api/v1/check_balance", headers={"Authorization": f"Bearer {token}"})
        if response.status_code == 200:
            data = response.json()
            logger.info(f"{LOGGER_PREFIX} –ë–∞–ª–∞–Ω—Å —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω!")
            logger.info(f"{LOGGER_PREFIX} –ë–∞–ª–∞–Ω—Å: {data}")
            if isinstance(data, (int, float)):
                return data
            return data.get("balance", 0)
        return 0
    except Exception as e:
        logger.error(f"{LOGGER_PREFIX} –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞: {e}")
        return 0

def check_balance_periodically(cardinal: Cardinal):
    global previous_balance
    while True:
        time.sleep(300)
        balance = get_balance()
        if balance is not None:
            if previous_balance is not None and balance > previous_balance:
                send_notification(cardinal, "", "balance", {"message": f"<b>üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞</b>\n\n<b>L –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å:</b> <code>{balance:.2f}$</code>\n<b>‚Ä¢ –î–∞—Ç–∞:</b> <code>{time.strftime('%Y-%m-%d %H:%M:%S', time.localtime())}</code>"}, parse_mode="HTML")
            if balance < SETTINGS["balance_threshold"] and not SETTINGS["low_balance_notified"]:
                send_notification(cardinal, "", "balance", {"message": f"<b>üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∏–∑–∫–æ–º –±–∞–ª–∞–Ω—Å–µ</b>\n\n<b>L –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å:</b> <code>{balance:.2f}$</code>\n<b>‚Ä¢ –î–∞—Ç–∞:</b> <code>{time.strftime('%Y-%m-%d %H:%M:%S', time.localtime())}</code>"}, parse_mode="HTML")
                SETTINGS["low_balance_notified"] = True
                save_settings()
            elif balance >= SETTINGS["balance_threshold"] and SETTINGS["low_balance_notified"]:
                SETTINGS["low_balance_notified"] = False
                save_settings()
            previous_balance = balance

def format_amount(amount: float, currency: str) -> str:
    return f"{int(amount)} {currency}"

def get_currency_rates():
    try:
        token = get_token()
        response = requests.post("https://api.ns.gifts/api/v1/steam/get_currency_rate", headers={"Authorization": f"Bearer {token}", "Content-Type": "application/json"})
        if response.status_code == 200:
            data = response.json()
            logger.info(f"{LOGGER_PREFIX} –ü–æ–ª—É—á–µ–Ω—ã –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç: {data}")
            return data
        logger.error(f"{LOGGER_PREFIX} –û—à–∏–±–∫–∞ API –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç: {response.status_code} - {response.text}")
        return None
    except Exception as e:
        logger.error(f"{LOGGER_PREFIX} –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç: {e}")
        return None

def get_max_amounts():
    balance = get_balance()
    if balance is None:
        logger.warning(f"{LOGGER_PREFIX} –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã—Ö —Å—É–º–º")
        return {"RUB": 0, "UAH": 0, "KZT": 0}
    rates = get_currency_rates()
    if rates is None:
        logger.warning(f"{LOGGER_PREFIX} –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã—Ö —Å—É–º–º")
        return {"RUB": 0, "UAH": 0, "KZT": 0}
    max_amounts = {}
    for currency in ["RUB", "UAH", "KZT"]:
        rate_key = f"{currency.lower()}/usd"
        rate = rates.get(rate_key)
        logger.info(f"{LOGGER_PREFIX} –ö—É—Ä—Å –¥–ª—è {currency}: {rate_key} = {rate}")
        if rate:
            max_amounts[currency] = float(balance) * float(rate)
            logger.info(f"{LOGGER_PREFIX} –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è {currency}: {max_amounts[currency]} (–±–∞–ª–∞–Ω—Å: {balance}, –∫—É—Ä—Å: {rate})")
        else:
            max_amounts[currency] = 0
            logger.warning(f"{LOGGER_PREFIX} –ö—É—Ä—Å –¥–ª—è {currency} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—Ç–≤–µ—Ç–µ API")
    logger.info(f"{LOGGER_PREFIX} –ò—Ç–æ–≥–æ–≤—ã–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ —Å—É–º–º—ã: {max_amounts}")
    return max_amounts

def open_settings(call: telebot.types.CallbackQuery, cardinal: Cardinal):
    if call.message.chat.id not in SETTINGS["notification_chats"]:
        SETTINGS["notification_chats"].append(call.message.chat.id)
        save_settings()
    kb = K()
    kb.row(B("‚úèÔ∏è –ù–∞—Å—Ç—Ä–æ–∏—Ç—å API", callback_data="as_set_api"), B("üö´ –ß–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫", callback_data="as_black_list"))
    kb.row(B(f"{'üîî' if SETTINGS['notifications_enabled'] else 'üîï'} –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", callback_data="as_toggle_notifications"), B(f"{'üü¢' if SETTINGS['auto_refund_on_error'] else 'üî¥'} –ê–≤—Ç–æ-–≤–æ–∑–≤—Ä–∞—Ç", callback_data="as_toggle_auto_refund"))
    kb.row(B(f"{'üõ°Ô∏è' if SETTINGS['order_verification_enabled'] else '‚ö†Ô∏è'} –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–∫–∞–∑–æ–≤", callback_data="as_toggle_order_verification"), B("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="as_statistics"))
    kb.row(B("üìú –ò—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤", callback_data="steam_order_history:1"))
    lots = cardinal.account.get_my_subcategory_lots(1086)
    all_active = all(lot.active for lot in lots) if lots else False
    toggle_button = B("üî¥ –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ª–æ—Ç—ã", callback_data="as_toggle_lots_deactivate") if all_active else B("üü¢ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ª–æ—Ç—ã", callback_data="as_toggle_lots_activate")
    kb.row(toggle_button)
    kb.row(B("üîÑ –û–±–Ω–æ–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é", callback_data="as_refresh_info"))
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å—Å—ã–ª–∫–∏ –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é
    kb.row(B("üîó –í—Ö–æ–¥ NSGifts", url="https://wholesale.ns.gifts/login/"), B("üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞ NSGifts", url="https://t.me/ns_gifts"))
    kb.row(B("üìñ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è", callback_data="as_instruction"), B("üì£ –ù–∞—à –∫–∞–Ω–∞–ª", url="https://t.me/stockhostnews"))
    kb.add(B("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"{CBT.EDIT_PLUGIN}:{UUID}:0"))
    balance = get_balance()
    balance_text = f"{balance:.2f}" if balance is not None else "–æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è"
    login = SETTINGS["api_login"] or "(–û—Ç –Ω—Å–≥–∏—Ñ—Ç—Å)"
    password = SETTINGS["api_password"] or "(–æ—Ç –Ω—Å –≥–∏—Ñ—Ç—Å)"
    active_lots = sum(1 for lot in lots if lot.active) if lots else 0
    orders = load_orders()
    total_sales = len(orders)
    black_list = load_black_list()
    black_list_count = len(black_list) if black_list else 0
    currency_rates = get_currency_rates()
    logger.info(f"{LOGGER_PREFIX} –ö—É—Ä—Å—ã –≤–∞–ª—é—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è: {currency_rates}")
    if currency_rates:
        rates_items = []
        for k, v in currency_rates.items():
            if k.upper() != 'DATE':
                rates_items.append(f"L {k.upper()}: <code>{v}</code>")
        rates_text = "<b>‚Ä¢ –ö—É—Ä—Å—ã –≤–∞–ª—é—Ç:</b>\n" + "\n".join(rates_items) + "\n"
        logger.info(f"{LOGGER_PREFIX} –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç: {rates_text}")
    else:
        rates_text = "<b>‚Ä¢ –ö—É—Ä—Å—ã –≤–∞–ª—é—Ç:</b> <code>–æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è</code>\n"
        logger.warning(f"{LOGGER_PREFIX} –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è")
    funpay_nick = cardinal.account.username if hasattr(cardinal.account, 'username') and cardinal.account.username else "–æ—à–∏–±–∫–∞"
    current_time = datetime.datetime.now().strftime("%H:%M:%S")
    settings_text = (
        f"<b>üöÄ Auto Steam v{VERSION}</b> ‚Äî <i>–∞–≤—Ç–æ–ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ Steam</i> (<code>{funpay_nick}</code>)\n\n"
        f"<b>‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ:</b> –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –≤ <b>—Ä—É–±–ª—è—Ö (RUB)</b> –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ.\n\n"
        f"<b>üí´ FunPay:</b>\n"
        f"  ‚Ä¢ –ù–∏–∫: <code>{funpay_nick}</code>\n"
        f"  ‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ–¥–∞–∂–∏: <code>{active_lots}</code>\n"
        f"  ‚Ä¢ –ü—Ä–æ–¥–∞–Ω–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π: <code>{total_sales}</code>\n"
        f"  ‚Ä¢ –ß–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ª–æ–≥–∏–Ω–æ–≤: <code>{black_list_count}</code>\n"
        f"  ‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–∫–∞–∑–æ–≤: <code>{'–í–∫–ª—é—á–µ–Ω–∞' if SETTINGS['order_verification_enabled'] else '–í—ã–∫–ª—é—á–µ–Ω–∞'}</code>\n\n"
        f"<b>üíõ NSGifts:</b>\n"
        f"  ‚Ä¢ –õ–æ–≥–∏–Ω: <code>{login}</code>\n"
        f"  ‚Ä¢ –ü–∞—Ä–æ–ª—å: <tg-spoiler>{password}</tg-spoiler>\n"
        f"  ‚Ä¢ –ë–∞–ª–∞–Ω—Å: <code>{balance_text} $</code>\n\n"
        f"{rates_text}"
        f"<b>‚Ä¢ –û–±–Ω–æ–≤–ª–µ–Ω–æ:</b> <code>{current_time}</code>"
    )
    bot.edit_message_text(settings_text, call.message.chat.id, call.message.id, reply_markup=kb, parse_mode="HTML")
    bot.answer_callback_query(call.id)

def statistics(call):
    chat_id = call.message.chat.id
    orders = load_orders()
    all_orders = [order for order in orders if order.get("status") == "success"]
    now = time.time()
    day_orders = [p for p in all_orders if p.get("timestamp", 0) >= now - 86400]
    week_orders = [p for p in all_orders if p.get("timestamp", 0) >= now - 604800]
    month_orders = [p for p in all_orders if p.get("timestamp", 0) >= now - 2592000]
    day_count, week_count, month_count = len(day_orders), len(week_orders), len(month_orders)
    day_sum = sum(float(p.get("sum", 0)) for p in day_orders)
    week_sum = sum(float(p.get("sum", 0)) for p in week_orders)
    month_sum = sum(float(p.get("sum", 0)) for p in month_orders)
    stats_text = f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–¥–∞–∂ (<code>{cardinal_instance.account.username}</code>)</b>\n\nü§ë <b>–ü—Ä–æ–¥–∞–∂–∏:</b>\nL –ó–∞ –¥–µ–Ω—å: <code>{day_count} —à—Ç. ({round(day_sum, 2)} ‚ÇΩ)</code>\nL –ó–∞ –Ω–µ–¥–µ–ª—é: <code>{week_count} —à—Ç. ({round(week_sum, 2)} ‚ÇΩ)</code>\nL –ó–∞ –º–µ—Å—è—Ü: <code>{month_count} —à—Ç. ({round(month_sum, 2)} ‚ÇΩ)</code>"
    bot.edit_message_text(stats_text, chat_id, call.message.id, reply_markup=K().add(B("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"{CBT.PLUGIN_SETTINGS}:{UUID}:0")), parse_mode="HTML")
    bot.answer_callback_query(call.id)

def toggle_lots(call: telebot.types.CallbackQuery, cardinal: Cardinal):
    action = call.data.split('_')[-1]
    try:
        lots = cardinal.account.get_my_subcategory_lots(1086)
        updated = False
        for lot in lots:
            if action == 'deactivate' and lot.active or action == 'activate' and not lot.active:
                lot_fields = cardinal.account.get_lot_fields(lot.id)
                lot_fields.active = action == 'activate'
                cardinal.account.save_lot(lot_fields)
                updated = True
                logger.info(f"{LOGGER_PREFIX} –õ–æ—Ç {lot.id} —É—Å–ø–µ—à–Ω–æ {'–¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω' if action == 'deactivate' else '–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω'}")
                time.sleep(0.7)
        bot.answer_callback_query(call.id, f"{'‚úÖ –õ–æ—Ç—ã Steam –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã' if action == 'deactivate' else '‚úÖ –õ–æ—Ç—ã Steam –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã'}" if updated else f"‚ÑπÔ∏è –í—Å–µ –≤–∞—à–∏ –ª–æ—Ç—ã —É–∂–µ {'–¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã' if action == 'deactivate' else '–∞–∫—Ç–∏–≤–Ω—ã'}")
        logger.info(f"{LOGGER_PREFIX} –í—Å–µ –ª–æ—Ç—ã —É—Å–ø–µ—à–Ω–æ {'–¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã' if action == 'deactivate' else '–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã'}")
    except Exception as e:
        logger.error(f"{LOGGER_PREFIX} –û—à–∏–±–∫–∞ –ø—Ä–∏ {'–¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏' if action == 'deactivate' else '–∞–∫—Ç–∏–≤–∞—Ü–∏–∏'} –ª–æ—Ç–æ–≤: {e}")
        bot.answer_callback_query(call.id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ {'–¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏' if action == 'deactivate' else '–∞–∫—Ç–∏–≤–∞—Ü–∏–∏'} –ª–æ—Ç–æ–≤")
    open_settings(call, cardinal)

def deactivate_lots_on_error(cardinal: Cardinal):
    for lot in [lot for lot in cardinal.account.get_user(cardinal.account.id).get_lots() if lot.subcategory.id == 1086]:
        lot_fields = cardinal.account.get_lot_fields(lot.id)
        lot_fields.active = False
        cardinal.account.save_lot(lot_fields)
        time.sleep(0.7)
    if SETTINGS["notification_types"]["error"]:
        send_notification(cardinal, "", "error", {"message": f"<b>üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ</b>\n\n<b>L –û–ø–∏—Å–∞–Ω–∏–µ:</b> <code>–õ–æ—Ç—ã Steam –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã –∏–∑-–∑–∞ –Ω–µ–¥–æ—Å—Ç–∞—Ç–∫–∞ —Å—Ä–µ–¥—Å—Ç–≤</code>\n\n<b>‚Ä¢ –î–∞—Ç–∞:</b> <code>{time.strftime('%Y-%m-%d %H:%M:%S', time.localtime())}</code>"}, parse_mode="HTML")

def refresh_info(call: telebot.types.CallbackQuery, cardinal: Cardinal):
    balance = get_balance()
    bot.answer_callback_query(call.id, "‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞" if balance is not None else "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏")
    open_settings(call, cardinal)

def show_instruction(call: telebot.types.CallbackQuery):
    chat_id = call.message.chat.id
    text = (
        "<b>üìñ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∞–≤—Ç–æ-–ø–æ–ø–æ–ª–Ω–µ–Ω–∏—é Steam</b>\n\n"
        "1) –û—Ç–∫—Ä–æ–π—Ç–µ: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ API ‚Üí —É–∫–∞–∂–∏—Ç–µ –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å NSGifts.\n"
        "2) –í–∫–ª—é—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å —Å—Ç–∞—Ç—É—Å—ã –∑–∞–∫–∞–∑–æ–≤.\n"
        "3) –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–ª–∏—á–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ª–æ—Ç–æ–≤ Steam –∏ –±–∞–ª–∞–Ω—Å NSGifts.\n"
        "4) –ü–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏ –Ω–∞ FunPay –≤ –æ—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ª–æ–≥–∏–Ω Steam, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ ¬´+¬ª.\n\n"
        "<b>‚ö†Ô∏è –í–∞–∂–Ω–æ:</b> –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –≤ <b>—Ä—É–±–ª—è—Ö (RUB)</b> –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ UAH/KZT.\n\n"
        "–ü–æ–ª–µ–∑–Ω–æ–µ: –ø–æ–¥–ø–∏—Å—ã–≤–∞–π—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª ‚Äî <a href=\"https://t.me/stockhostnews\">Stock Host –ù–æ–≤–æ—Å—Ç–∏</a>."
    )
    kb = K().row(B("üì£ –ù–∞—à –∫–∞–Ω–∞–ª", url="https://t.me/stockhostnews"))
    kb.add(B("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"{CBT.PLUGIN_SETTINGS}:{UUID}:0"))
    bot.edit_message_text(text, chat_id, call.message.id, reply_markup=kb, parse_mode="HTML")
    bot.answer_callback_query(call.id)

def black_list_menu(call: telebot.types.CallbackQuery, cardinal: Cardinal):
    black_list = load_black_list()
    text = "–°–ø–∏—Å–æ–∫ —é–∑–µ—Ä–Ω–µ–π–º–æ–≤ –≤ –ß–µ—Ä–Ω–æ–º –°–ø–∏—Å–∫–µ\n" + "\n".join(black_list) if black_list else "–°–ø–∏—Å–æ–∫ —é–∑–µ—Ä–Ω–µ–π–º–æ–≤ –≤ –ß–µ—Ä–Ω–æ–º –°–ø–∏—Å–∫–µ\n–ü—É—Å—Ç–æ"
    kb = K().row(B("‚ûï –î–æ–±–∞–≤–∏—Ç—å", callback_data="as_add_to_black_list"), B("‚ûñ –£–¥–∞–ª–∏—Ç—å", callback_data="as_remove_from_black_list"))
    kb.add(B("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"{CBT.PLUGIN_SETTINGS}:{UUID}:0"))
    bot.edit_message_text(text, call.message.chat.id, call.message.id, reply_markup=kb)
    bot.answer_callback_query(call.id)

def add_to_black_list(call: telebot.types.CallbackQuery, cardinal: Cardinal):
    kb = K().add(B("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_input"))
    msg = bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω Steam –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫:", reply_markup=kb)
    tg.set_state(call.message.chat.id, msg.id, call.from_user.id, "as_add_to_black_list", {"call": call, "msg_id": msg.id})
    bot.answer_callback_query(call.id)

def on_add_to_black_list(message: telebot.types.Message):
    state = tg.get_state(message.chat.id, message.from_user.id)
    call, msg_id = state["data"]["call"], state["data"]["msg_id"]
    login = message.text.strip().lower()
    black_list = load_black_list()
    if login not in black_list:
        black_list.append(login)
        save_black_list(black_list)
        kb = K().add(B("‚óÄÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data=f"{CBT.PLUGIN_SETTINGS}:{UUID}:0"))
        bot.send_message(message.chat.id, f"‚úÖ –õ–æ–≥–∏–Ω {login} –¥–æ–±–∞–≤–ª–µ–Ω –≤ —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫.", reply_markup=kb)
    else:
        bot.send_message(message.chat.id, f"‚ùå –õ–æ–≥–∏–Ω {login} —É–∂–µ –≤ —á–µ—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ.")
    bot.delete_message(message.chat.id, message.id)
    bot.delete_message(message.chat.id, msg_id)
    tg.clear_state(message.chat.id, message.from_user.id)

def remove_from_black_list(call: telebot.types.CallbackQuery, cardinal: Cardinal):
    black_list = load_black_list()
    if not black_list:
        bot.send_message(call.message.chat.id, "‚ùå –ß–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç.")
        bot.answer_callback_query(call.id)
        return
    kb = K()
    for login in black_list:
        kb.add(B(login, callback_data=f"as_remove_black_list_confirm:{login}"))
    kb.add(B("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="as_black_list"))
    bot.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –ª–æ–≥–∏–Ω –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", call.message.chat.id, call.message.id, reply_markup=kb)
    bot.answer_callback_query(call.id)

def remove_black_list_confirm(call: telebot.types.CallbackQuery, cardinal: Cardinal):
    login = call.data.split(":")[1]
    black_list = load_black_list()
    if login in black_list:
        black_list.remove(login)
        save_black_list(black_list)
        bot.answer_callback_query(call.id, f"‚úÖ –õ–æ–≥–∏–Ω {login} —É–¥–∞–ª–µ–Ω –∏–∑ —á–µ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞.")
    else:
        bot.answer_callback_query(call.id, f"‚ùå –õ–æ–≥–∏–Ω {login} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —á–µ—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ.")
    black_list_menu(call, cardinal)

def toggle_option(call: telebot.types.CallbackQuery, cardinal: Cardinal, key: str, subkey: str = None):
    if subkey:
        SETTINGS[key][subkey] = not SETTINGS[key][subkey]
        status = "–≤–∫–ª—é—á–µ–Ω—ã" if SETTINGS[key][subkey] else "–≤—ã–∫–ª—é—á–µ–Ω—ã"
    else:
        SETTINGS[key] = not SETTINGS[key]
        status = "–≤–∫–ª—é—á–µ–Ω—ã" if SETTINGS[key] else "–≤—ã–∫–ª—é—á–µ–Ω—ã"
    save_settings()
    open_settings(call, cardinal)

def send_notification(cardinal: Cardinal, order_id: str, status: str, details: dict, parse_mode: str = None):
    if not SETTINGS["notifications_enabled"]: return
    if status == "balance":
        message = details["message"]
    else:
        order = cardinal.account.get_order(order_id) if order_id else None
        buyer_username = order.buyer_username if order else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        buyer_id = order.buyer_id if order else None
        quantity = details.get("quantity", 0)
        currency = details.get("currency", "RUB")
        steam_login = details.get("steam_login", "–ù–µ —É–∫–∞–∑–∞–Ω")
        timestamp = time.strftime('%Y-%m-%d %H:%M:%S', time.localtime(details.get("timestamp", time.time())))
        amount_usd = details.get("amount_usd", 0)
        rate = details.get("rate", 0)
        status_text = {"success": "—É—Å–ø–µ—à–Ω–æ–º –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–∏", "error": "–æ—à–∏–±–∫–µ", "refund": "–≤–æ–∑–≤—Ä–∞—Ç–µ"}.get(status, status)
        message = f"<b>üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ {status_text}</b>\n\n<b>üíô FunPay:</b>\n<b>L ID –ó–∞–∫–∞–∑–∞:</b> <code>#{order_id}</code>\n<b>L –ü–æ–∫—É–ø–∞—Ç–µ–ª—å:</b> <code>{buyer_username}</code>\n<b>L –¶–µ–Ω–∞ –Ω–∞ FunPay:</b> <code>{order.sum if order else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'} ‚ÇΩ</code>\n\n<b>üíô Steam:</b>\n<b>L –õ–æ–≥–∏–Ω Steam:</b> <code>{steam_login}</code>\n<b>L –°—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:</b> <code>{format_amount(quantity, currency)}</code>\n<b>L –í–∞–ª—é—Ç–∞:</b> <code>{currency}</code>"
        if status == "success":
            message += f"\n<b>L –°—É–º–º–∞ –≤ USD:</b> <code>{amount_usd:.2f}$</code>\n<b>L –ö—É—Ä—Å –æ–±–º–µ–Ω–∞ ({currency}/USD):</b> <code>{rate}</code>"
            balance = get_balance()
            message += f"\n<b>L –û—Å—Ç–∞—Ç–æ–∫ –±–∞–ª–∞–Ω—Å–∞:</b> <code>{balance:.2f}$</code>"
        if "message" in details:
            message += f"\n<b>L –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ:</b> <code>{details['message']}</code>"
        message += f"\n\n<b>‚Ä¢ –î–∞—Ç–∞:</b> <code>{timestamp}</code>"
    kb = K(row_width=2).add(B("üíô FunPay", url=f"https://funpay.com/orders/{order_id}/"), B("üíô –ü–æ–∫—É–ø–∞—Ç–µ–ª—å", url=f"https://funpay.com/users/{buyer_id if order else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}/"))
    for chat_id in SETTINGS["notification_chats"]:
        try:
            bot.send_message(chat_id, message, parse_mode="HTML", reply_markup=kb if kb.keyboard else None)
        except Exception as e:
            logger.error(f"{LOGGER_PREFIX} –û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ —á–∞—Ç {chat_id}: {e}")

def cancel_input(call: telebot.types.CallbackQuery, cardinal: Cardinal):
    tg.clear_state(call.message.chat.id, call.from_user.id)
    try:
        bot.delete_message(call.message.chat.id, call.message.id)
    except Exception as e:
        logger.error(f"{LOGGER_PREFIX} –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    open_settings(call, cardinal_instance)
    bot.answer_callback_query(call.id)

def set_api(call: telebot.types.CallbackQuery, cardinal: Cardinal):
    kb = K().row(B("üîë –ò–∑–º–µ–Ω–∏—Ç—å –ª–æ–≥–∏–Ω", callback_data="as_set_api_login"), B("üîí –ò–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å", callback_data="as_set_api_password"))
    kb.add(B("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"{CBT.PLUGIN_SETTINGS}:{UUID}:0"))
    bot.edit_message_text("‚úèÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ API", call.message.chat.id, call.message.id, reply_markup=kb)
    bot.answer_callback_query(call.id)

def set_api_field(call: telebot.types.CallbackQuery, cardinal: Cardinal, field: str):
    kb = K().add(B("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_input"))
    msg = bot.send_message(call.message.chat.id, f"{'üë§' if field == 'login' else 'üîë'} –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π {field} –¥–ª—è API:", reply_markup=kb)
    tg.set_state(call.message.chat.id, msg.id, call.from_user.id, f"as_set_api_{field}", {"call": call, "msg_id": msg.id})
    bot.answer_callback_query(call.id)

def on_api_field(message: telebot.types.Message, field: str):
    state = tg.get_state(message.chat.id, message.from_user.id)
    call, msg_id = state["data"]["call"], state["data"]["msg_id"]
    SETTINGS[f"api_{field}"] = message.text.strip()
    save_settings()
    bot.delete_message(message.chat.id, message.id)
    bot.delete_message(message.chat.id, msg_id)
    bot.answer_callback_query(call.id, f"‚úÖ {field.capitalize()} API –æ–±–Ω–æ–≤–ª—ë–Ω")
    open_settings(call, cardinal_instance)
    tg.clear_state(message.chat.id, message.from_user.id)

def handle_new_message(cardinal: Cardinal, event: NewMessageEvent):
    message = event.message
    state_key = (message.chat_id, message.author_id)
    state = FUNPAY_STATES.get(state_key)

    # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: —Ç–æ–ª—å–∫–æ —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –ø–ª–∞—Ç–µ–∂–µ –≤—ã–∑—ã–≤–∞—é—Ç process_new_order
    if message.author_id == 0 and message.type and message.type.name == "ORDER_PURCHASED":
        order_id = extract_order_id_from_message(message.text)
        if order_id:
            if not SETTINGS["order_verification_enabled"] or verify_order_exists(cardinal, order_id):
                try:
                    order = cardinal.account.get_order(order_id)
                    buyer_id = order.buyer_id
                    USER_ORDER_QUEUES.setdefault(buyer_id, Queue()).put({"order_id": order_id, "chat_id": message.chat_id})
                    threading.Thread(target=process_user_orders, args=(cardinal, buyer_id), daemon=True).start()
                    logger.info(f"{LOGGER_PREFIX} –ó–∞–∫–∞–∑ #{order_id} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å –æ–±—Ä–∞–±–æ—Ç–∫–∏")
                except Exception as e:
                    logger.error(f"{LOGGER_PREFIX} –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–∫–∞–∑–µ #{order_id}: {e}")
            else:
                logger.warning(f"{LOGGER_PREFIX} –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –ø–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–¥–µ–ª–∫–∏ –∑–∞–∫–∞–∑–∞ #{order_id}")
                if SETTINGS["notification_types"]["error"]:
                    send_notification(cardinal, order_id, "error", {
                        "message": f"<b>üîî –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –ø–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–¥–µ–ª–∫–∏ –∑–∞–∫–∞–∑–∞</b>\n\n<b>L ID –∑–∞–∫–∞–∑–∞:</b> <code>#{order_id}</code>\n<b>L –ü–æ–∫—É–ø–∞—Ç–µ–ª—å:</b> <code>–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ</code>\n<b>L –°—Ç–∞—Ç—É—Å:</b> <code>–ó–∞–∫–∞–∑ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø—Ä–æ–¥–∞–≤—Ü—É</code>\n<b>‚Ä¢ –î–∞—Ç–∞:</b> <code>{time.strftime('%Y-%m-%d %H:%M:%S', time.localtime())}</code>"
                    }, parse_mode="HTML")
        return

    if state and state.get("data", {}).get("order_id"):
        order_id = state["data"]["order_id"]
        try:
            order = cardinal.account.get_order(order_id)
            if order.status in [OrderStatuses.CLOSED, OrderStatuses.REFUNDED]:
                FUNPAY_STATES.pop(state_key, None)
                return
        except Exception as e:
            logger.error(f"{LOGGER_PREFIX} –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞ #{order_id}: {e}")
            FUNPAY_STATES.pop(state_key, None)
            return

    if state and state["state"] == "waiting_for_steam_login":
        steam_login = message.text.strip()
        order_id = state["data"]["order_id"]
        order = cardinal.account.get_order(order_id)
        if order.status in [OrderStatuses.CLOSED, OrderStatuses.REFUNDED]:
            FUNPAY_STATES.pop(state_key, None)
            return
        if re.match(r'^[a-zA-Z0-9]+$', steam_login):
            currency = extract_currency(order.html) or "RUB"
            quantity = extract_quantity(order.html) or 1
            cardinal.send_message(message.chat_id, f"‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ:\nL –õ–æ–≥–∏–Ω Steam: {steam_login}\nL –°—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: {format_amount(quantity, currency)}\n\n‚Ä¢ –ï—Å–ª–∏ –≤—Å—ë –≤–µ—Ä–Ω–æ, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ ¬´+¬ª –±–µ–∑ –∫–∞–≤—ã—á–µ–∫\nL –õ–∏–±–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π –ª–æ–≥–∏–Ω")
            logger.info(f"{LOGGER_PREFIX} –ó–∞–ø—Ä–æ—Å–∏–ª —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {order.buyer_username} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ª–æ–≥–∏–Ω–∞")
            logger.info(f"{LOGGER_PREFIX} ID –ó–∞–∫–∞–∑–∞: #{order_id}")
            logger.info(f"{LOGGER_PREFIX} –õ–æ–≥–∏–Ω Steam: {steam_login}")
            logger.info(f"{LOGGER_PREFIX} –°—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: {format_amount(quantity, currency)}")
            FUNPAY_STATES[state_key] = {"state": "confirming_login", "data": {"steam_login": steam_login, "order_id": order_id, "currency": currency, "quantity": quantity}}
        return
    
    if state and state["state"] == "confirming_login":
        order_id = state["data"]["order_id"]
        order = cardinal.account.get_order(order_id)
        if order.status in [OrderStatuses.CLOSED, OrderStatuses.REFUNDED]:
            FUNPAY_STATES.pop(state_key, None)
            return
        if message.text.strip() == "+" or message.text.strip() == "¬´+¬ª":
            queue_size = USER_ORDER_QUEUES.get(message.author_id, Queue()).qsize() + 1
            wait_time = int(queue_size * 15)
            cardinal.send_message(message.chat_id, f"‚è≥ –í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ Steam –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å.\nL –í–∞—à–∞ –ø–æ–∑–∏—Ü–∏—è: {queue_size}.\nL –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è: {wait_time} —Å–µ–∫.")
            logger.info(f"{LOGGER_PREFIX} –ù–∞—á–∞–ª –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ Steam –¥–ª—è –∑–∞–∫–∞–∑–∞ #{order_id}")
            logger.info(f"{LOGGER_PREFIX} –ù–∏–∫ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è: {order.buyer_username}")
            logger.info(f"{LOGGER_PREFIX} –õ–æ–≥–∏–Ω Steam: {state['data']['steam_login']}")
            logger.info(f"{LOGGER_PREFIX} –°—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: {state['data']['quantity']} {state['data']['currency']}")
            perform_top_up(cardinal, state["data"]["order_id"], state["data"]["steam_login"], state["data"]["currency"], state["data"]["quantity"], message.chat_id, message.author_id)
        elif re.match(r'^[a-zA-Z0-9]+$', message.text.strip()):
            new_steam_login = message.text.strip()
            currency = extract_currency(order.html) or "RUB"
            quantity = extract_quantity(order.html) or 1
            cardinal.send_message(message.chat_id, f"‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ:\nL –õ–æ–≥–∏–Ω Steam: {new_steam_login}\nL –°—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: {format_amount(quantity, currency)}\n\n‚Ä¢ –ï—Å–ª–∏ –≤—Å—ë –≤–µ—Ä–Ω–æ, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ ¬´+¬ª –±–µ–∑ –∫–∞–≤—ã—á–µ–∫\nL –õ–∏–±–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π –ª–æ–≥–∏–Ω")
            logger.info(f"{LOGGER_PREFIX} –ó–∞–ø—Ä–æ—Å–∏–ª —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {order.buyer_username} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ª–æ–≥–∏–Ω–∞")
            logger.info(f"{LOGGER_PREFIX} ID –ó–∞–∫–∞–∑–∞: #{order_id}")
            logger.info(f"{LOGGER_PREFIX} –õ–æ–≥–∏–Ω Steam: {state['data']['steam_login']}")
            logger.info(f"{LOGGER_PREFIX} –°—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: {format_amount(quantity, currency)}")
            FUNPAY_STATES[state_key] = {"state": "confirming_login", "data": {"steam_login": new_steam_login, "order_id": order_id, "currency": currency, "quantity": quantity}}
        return

    if state and (state["state"] == "waiting_for_steam_login" or state["state"] == "confirming_login"):
        return

    # –£–¥–∞–ª–µ–Ω–æ: if "–æ–ø–ª–∞—Ç–∏–ª" in message.text.lower() and "–∑–∞–∫–∞–∑" in message.text.lower() or "#" in message.text:
    #          process_new_order(cardinal, message)

def refund_and_cleanup(cardinal: Cardinal, order_id: str, chat_id: int, author_id: int, steam_login: str = "–ù–µ —É–∫–∞–∑–∞–Ω"):
    try:
        order = cardinal.account.get_order(order_id)
        if order.status != OrderStatuses.REFUNDED:
            cardinal.account.refund(order_id)
            cardinal.send_message(chat_id, "‚ùå –°—Ä–µ–¥—Å—Ç–≤–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏.\nL –ü—Ä–∏–Ω–æ—Å–∏–º –∏–∑–≤–∏–Ω–µ–Ω–∏—è –∑–∞ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ –Ω–µ—É–¥–æ–±—Å—Ç–≤–∞")
            logger.info(f"{LOGGER_PREFIX} –ó–∞–∫–∞–∑ #{order_id} —É—Å–ø–µ—à–Ω–æ –≤–æ–∑–≤—Ä–∞—â–µ–Ω")
            if SETTINGS["notification_types"]["refund"]:
                send_notification(cardinal, order_id, "refund", {"steam_login": steam_login, "quantity": extract_quantity(order.html) or 1, "currency": extract_currency(order.html) or "RUB", "timestamp": time.time()})
    except Exception as e:
        logger.error(f"{LOGGER_PREFIX} –û—à–∏–±–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞: {e}")
        if SETTINGS["notification_types"]["error"]:
            send_notification(cardinal, order_id, "error", {"steam_login": steam_login, "quantity": extract_quantity(order.html) or 1, "currency": extract_currency(order.html) or "RUB", "timestamp": time.time(), "message": f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ: {e}"})
    finally:
        FUNPAY_STATES.pop((chat_id, author_id), None)

def process_order(cardinal: Cardinal, order_id: str, chat_id: int, buyer_id: int):
    time.sleep(3)
    try:
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ª–∏–Ω–Ω–æ—Å—Ç–∏ –∑–∞–∫–∞–∑–∞ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞
        if SETTINGS["order_verification_enabled"] and not verify_order_exists(cardinal, order_id):
            logger.warning(f"{LOGGER_PREFIX} –ó–∞–∫–∞–∑ #{order_id} –Ω–µ –ø—Ä–æ—à–µ–ª –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ–¥–ª–∏–Ω–Ω–æ—Å—Ç–∏ –≤ process_order")
            FUNPAY_STATES.pop((chat_id, buyer_id), None)
            return
            
        order = cardinal.account.get_order(order_id)
        if order.status in [OrderStatuses.CLOSED, OrderStatuses.REFUNDED]:
            FUNPAY_STATES.pop((chat_id, buyer_id), None)
            return
        if order.subcategory.id != 1086:
            return
        quantity, currency = extract_quantity(order.html) or 1, extract_currency(order.html) or "RUB"
        min_amount = MIN_AMOUNTS.get(currency, 0)
        max_amounts = get_max_amounts()
        max_amount = max_amounts.get(currency, 0)
        if not (min_amount <= float(quantity) <= max_amount):
            cardinal.account.refund(order_id)
            cardinal.send_message(chat_id, f"‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ {format_amount(quantity, currency)} –≤–Ω–µ –ª–∏–º–∏—Ç–æ–≤ ({min_amount} - {max_amount}). –°—Ä–µ–¥—Å—Ç–≤–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã.")
            if SETTINGS["notification_types"]["refund"]:
                send_notification(cardinal, order_id, "refund", {"steam_login": "–ù–µ —É–∫–∞–∑–∞–Ω", "quantity": quantity, "currency": currency, "timestamp": time.time()})
            FUNPAY_STATES.pop((chat_id, buyer_id), None)
            return
        steam_login = extract_steam_login(order.html)
        if steam_login:
            if order.status in [OrderStatuses.CLOSED, OrderStatuses.REFUNDED]:
                FUNPAY_STATES.pop((chat_id, buyer_id), None)
                return
            cardinal.send_message(chat_id, f"‚ù§Ô∏è –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!\n\n‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ:\nL –õ–æ–≥–∏–Ω Steam: {steam_login}\nL –°—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: {format_amount(quantity, currency)}\n\n‚Ä¢ –ï—Å–ª–∏ –≤—Å—ë –≤–µ—Ä–Ω–æ, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ ¬´+¬ª –±–µ–∑ –∫–∞–≤—ã—á–µ–∫\nL –õ–∏–±–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π –ª–æ–≥–∏–Ω")
            logger.info(f"{LOGGER_PREFIX} –ó–∞–ø—Ä–æ—Å–∏–ª —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {order.buyer_username} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ª–æ–≥–∏–Ω–∞")
            logger.info(f"{LOGGER_PREFIX} ID –ó–∞–∫–∞–∑–∞: #{order_id}")
            logger.info(f"{LOGGER_PREFIX} –õ–æ–≥–∏–Ω Steam: {steam_login}")
            logger.info(f"{LOGGER_PREFIX} –°—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: {format_amount(quantity, currency)}")
            FUNPAY_STATES[(chat_id, buyer_id)] = {"state": "confirming_login", "data": {"steam_login": steam_login, "order_id": order_id, "currency": currency, "quantity": float(quantity)}}
    except Exception as e:
        logger.error(f"{LOGGER_PREFIX} –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–∫–∞–∑–∞ #{order_id}: {e}")
        FUNPAY_STATES.pop((chat_id, buyer_id), None)

def extract_field(html: str, field: str):
    soup = BeautifulSoup(html, 'lxml')
    for item in soup.find_all('div', class_='param-item'):
        h5 = item.find('h5')
        if h5 and field in h5.text:
            bold = item.find('div', class_='text-bold')
            if bold:
                text = bold.text.strip()
                if field == "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ":
                    return float(re.sub(r'[^\d.]', '', text)) if re.sub(r'[^\d.]', '', text) else None
                return text
    return None

extract_steam_login = lambda html: extract_field(html, "–õ–æ–≥–∏–Ω Steam")
extract_currency = lambda html: extract_field(html, "–¢–∏–ø –≤–∞–ª—é—Ç—ã")
extract_quantity = lambda html: extract_field(html, "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ")

def get_token():
    if time.time() < TOKEN_DATA["expiry"]:
        return TOKEN_DATA["token"]
    payload = {"email": SETTINGS["api_login"], "password": SETTINGS["api_password"]}
    response = requests.post("https://api.ns.gifts/api/v1/get_token", json=payload)
    if response.status_code == 200:
        data = response.json()
        TOKEN_DATA["token"] = data.get("token") or data.get("access_token") or data["data"]["token"]
        TOKEN_DATA["expiry"] = data.get("valid_thru", time.time() + 7200)
        return TOKEN_DATA["token"]
    raise Exception(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω: {response.status_code}")

def get_steam_amount(amount: float, currency: str = "RUB"):
    token = get_token()
    response = requests.post("https://api.ns.gifts/api/v1/steam/get_amount", json={"amount": round(amount, 2), "currency": currency}, headers={"Authorization": f"Bearer {token}"})
    if response.status_code == 200:
        return float(response.json().get("usd_price", 0))
    logger.error(f"{LOGGER_PREFIX} –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫—É—Ä—Å–∞: {response.status_code} - {response.text}")
    raise Exception(f"–û—à–∏–±–∫–∞ API NSGifts: {response.status_code}")

def create_order(service_id: int, quantity: str, data: str):
    token = get_token()
    custom_id = str(uuid.uuid4())
    response = requests.post("https://api.ns.gifts/api/v1/create_order", json={"service_id": service_id, "quantity": quantity, "custom_id": custom_id, "data": data}, headers={"Authorization": f"Bearer {token}"})
    if response.status_code == 200:
        return response.json().get("custom_id")
    error_text = response.text
    if response.status_code == 400 and "There is no such login" in error_text:
        raise Exception("InvalidLogin")
    raise Exception(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑: {response.status_code} - {error_text}")

def pay_order(custom_id: str):
    token = get_token()
    response = requests.post("https://api.ns.gifts/api/v1/pay_order", json={"custom_id": custom_id}, headers={"Authorization": f"Bearer {token}"})
    if response.status_code == 200:
        return True
    error_message = response.json().get("detail", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
    if "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤" in error_message:
        raise Exception("InsufficientFunds")
    raise Exception(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø–ª–∞—Ç–∏—Ç—å: {response.status_code} - {error_message}")

def perform_top_up(cardinal: Cardinal, order_id: str, steam_login: str, currency: str, quantity: float, chat_id: int, author_id: int):
    state_key = (chat_id, author_id)
    black_list = load_black_list()
    if steam_login.lower() in black_list:
        cardinal.send_message(chat_id, "‚ùå –í–∞—à –ª–æ–≥–∏–Ω Steam –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —á–µ—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ. –û–∂–∏–¥–∞–π—Ç–µ –ø—Ä–æ–¥–∞–≤—Ü–∞.")
        logger.info(f"{LOGGER_PREFIX} –õ–æ–≥–∏–Ω {steam_login} –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —á–µ—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ")
        order = cardinal.account.get_order(order_id)
        send_notification(cardinal, order_id, "error", {"message": f"<b>üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ</b>\n\n<b>L –ü—Ä–∏—á–∏–Ω–∞:</b> <code>–û–±–Ω–∞—Ä—É–∂–µ–Ω –ª–æ–≥–∏–Ω –∏–∑ —á–µ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞</code>\n<b>L –ü–æ–∫—É–ø–∞—Ç–µ–ª—å:</b> <code>{order.buyer_username}</code>\n<b>L –õ–æ–≥–∏–Ω Steam:</b> <code>{steam_login}</code>\n<b>‚Ä¢ –î–∞—Ç–∞:</b> <code>{time.strftime('%Y-%m-%d %H:%M:%S', time.localtime())}</code>"}, parse_mode="HTML")
        FUNPAY_STATES.pop(state_key, None)
        return
    try:
        order = cardinal.account.get_order(order_id)
        if order.status in [OrderStatuses.CLOSED, OrderStatuses.REFUNDED]:
            FUNPAY_STATES.pop(state_key, None)
            return
        rates = get_currency_rates()
        rate_key = f"{currency.lower()}/usd"
        rate = rates.get(rate_key, 0) if rates else 0
        logger.info(f"{LOGGER_PREFIX} –ö—É—Ä—Å –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è {currency}: {rate_key} = {rate}")
        amount_usd = round(float(quantity) / float(rate), 2) if rate != 0 else 0.22
        logger.info(f"{LOGGER_PREFIX} –°—É–º–º–∞ –≤ USD –¥–ª—è {quantity} {currency}: {amount_usd} (–∫—É—Ä—Å: {rate})")
        custom_id = create_order(1, f"{amount_usd:.2f}", steam_login)
        pay_order(custom_id)
        current_time = time.strftime('%H:%M:%S | %Y-%m-%d')
        cardinal.send_message(chat_id, f"‚Å°üéâ‚Å°-----------------------------------------------------------üéâ\n\nüíô –°—Ä–µ–¥—Å—Ç–≤–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã!\n\nL –õ–æ–≥–∏–Ω Steam: {steam_login}\nL –°—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: {format_amount(quantity, currency)}\nL –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {current_time}\n\n‚Ä¢ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–∫–∞–∑: https://funpay.com/orders/{order_id}/\n\n‚ù§Ô∏è –ù–µ –∑–∞–±—É–¥—å—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ —Å —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º –ø–æ–ª–Ω–æ–π –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –∑–∞–∫–∞–∑–∞, –ø—Ä–∏—è—Ç–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è!")
        logger.info(f"{LOGGER_PREFIX} –ó–∞–∫–∞–∑ #{order_id} —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω!")
        logger.info(f"{LOGGER_PREFIX} –ù–∏–∫–Ω–µ–π–º –ø–æ–∫—É–ø–∞—Ç–µ–ª—è: {order.buyer_username}")
        logger.info(f"{LOGGER_PREFIX} –õ–æ–≥–∏–Ω Steam: {steam_login}")
        logger.info(f"{LOGGER_PREFIX} –°—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: {format_amount(quantity, currency)}")
        logger.info(f"{LOGGER_PREFIX} –°—É–º–º–∞ –≤ USD: {amount_usd:.2f}")
        logger.info(f"{LOGGER_PREFIX} –ö—É—Ä—Å –æ–±–º–µ–Ω–∞ {currency}/USD: {rate}")
        logger.info(f"{LOGGER_PREFIX} –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {current_time}")
        if SETTINGS["notification_types"]["success"]:
            send_notification(cardinal, order_id, "success", {"steam_login": steam_login, "quantity": float(quantity), "currency": currency, "timestamp": time.time(), "amount_usd": amount_usd, "rate": rate}, parse_mode="HTML")
        SUCCESSFUL_ORDERS[order_id] = time.time()
        threading.Thread(target=check_order_confirmation, args=(cardinal, order_id, chat_id, author_id), daemon=True).start()
        order_info = {"order_id": order_id, "buyer_username": order.buyer_username, "buyer_id": order.buyer_id, "sum": order.sum, "currency": currency, "quantity": float(quantity), "steam_login": steam_login, "status": "success", "timestamp": time.time(), "amount_usd": amount_usd, "rate": rate}
        orders = load_orders()
        orders.append(order_info)
        save_orders(orders)
        FUNPAY_STATES.pop(state_key, None)
    except Exception as e:
        error_msg = str(e)
        if error_msg == "InvalidLogin":
            cardinal.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞: –£–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ª–æ–≥–∏–Ω–∞ –≤ Steam –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.\nL –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ª–æ–≥–∏–Ω Steam.")
            logger.warning(f"{LOGGER_PREFIX} –õ–æ–≥–∏–Ω {steam_login} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            FUNPAY_STATES[state_key] = {"state": "waiting_for_steam_login", "data": {"order_id": order_id}}
        else:
            cardinal.send_message(chat_id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞")
            logger.error(f"{LOGGER_PREFIX} –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞ #{order_id}")
            logger.error(f"{LOGGER_PREFIX} –û—à–∏–±–∫–∞: {error_msg}")
            if SETTINGS["notification_types"]["error"]:
                send_notification(cardinal, order_id, "error", {"steam_login": steam_login, "quantity": float(quantity), "currency": currency, "timestamp": time.time(), "message": f"–û—à–∏–±–∫–∞: {error_msg}"}, parse_mode="HTML")
            if error_msg == "InsufficientFunds":
                deactivate_lots_on_error(cardinal)
            if SETTINGS["auto_refund_on_error"]:
                refund_and_cleanup(cardinal, order_id, chat_id, author_id, steam_login)
            else:
                send_notification(cardinal, order_id, "refund", {"message": f"<b>üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≤–æ–∑–≤—Ä–∞—Ç–µ</b>\n\n<b>L –ü—Ä–∏—á–∏–Ω–∞:</b> <code>–¢—Ä–µ–±—É–µ—Ç—Å—è –≤–æ–∑–≤—Ä–∞—Ç –≤—Ä—É—á–Ω—É—é</code>\n<b>L –ü–æ–∫—É–ø–∞—Ç–µ–ª—å:</b> <code>{cardinal.account.get_order(order_id).buyer_username}</code>\n<b>L –õ–æ–≥–∏–Ω Steam:</b> <code>{steam_login}</code>\n<b>L –°—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:</b> <code>{format_amount(quantity, currency)}</code>\n\n<b>‚Ä¢ –î–∞—Ç–∞:</b> <code>{time.strftime('%Y-%m-%d %H:%M:%S', time.localtime())}</code>"}, parse_mode="HTML")
            if cardinal.account.get_order(order_id).status in [OrderStatuses.CLOSED, OrderStatuses.REFUNDED]:
                FUNPAY_STATES.pop(state_key, None)

def check_order_confirmation(cardinal: Cardinal, order_id: str, chat_id: int, author_id: int):
    time.sleep(2 * 60)
    order = cardinal.account.get_order(order_id)
    if order.status not in [OrderStatuses.CLOSED, OrderStatuses.REFUNDED]:
        cardinal.send_message(chat_id, f"‚Å°üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–∫–∞–∑. –≠—Ç–æ —è–≤–ª—è–µ—Ç—Å—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º!\n\n‚Ä¢ –°—Å—ã–ª–∫–∞ –Ω–∞ –∑–∞–∫–∞–∑: https://funpay.com/orders/{order_id}/")
        logger.info(f"{LOGGER_PREFIX} –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞ #{order_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")

def order_history(call: telebot.types.CallbackQuery, cardinal: Cardinal):
    chat_id, page = call.message.chat.id, int(call.data.split(":")[1]) if len(call.data.split(":")) > 1 else 1
    orders = sorted(load_orders(), key=lambda x: x.get("timestamp", 0), reverse=True)
    if not orders:
        bot.edit_message_text("üìú –ò—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤ –ø—É—Å—Ç–∞.", chat_id, call.message.id, reply_markup=K().add(B("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"{CBT.PLUGIN_SETTINGS}:{UUID}:0")), parse_mode="HTML")
        bot.answer_callback_query(call.id)
        return
    items_per_page, total_items = 10, len(orders)
    total_pages = (total_items + items_per_page - 1) // items_per_page
    page = max(1, min(page, total_pages))
    start_idx = (page - 1) * items_per_page
    page_orders = orders[start_idx:start_idx + items_per_page]
    markup = K(row_width=1).add(*[B(f"üíô #{order.get('order_id', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')} | {order.get('buyer_username', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')} | {order.get('sum', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')} ‚ÇΩ", callback_data=f"steam_order_details:{order.get('order_id', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}:{start_idx}") for order in page_orders])
    if total_pages > 1:
        buttons = []
        if total_pages > 2:
            buttons.append(B("‚è™Ô∏è", callback_data=f"steam_pagination_prev:1"))
        buttons.append(B("‚¨ÖÔ∏è", callback_data=f"steam_pagination_prev:{page-1}" if page > 1 else f"steam_pagination_prev:1"))
        buttons.append(B(f"{page}/{total_pages}", callback_data="dummy"))
        buttons.append(B("‚û°Ô∏è", callback_data=f"steam_pagination_next:{page+1}" if page < total_pages else f"steam_pagination_next:{total_pages}"))
        if total_pages > 2:
            buttons.append(B("‚è©Ô∏è", callback_data=f"steam_pagination_next:{total_pages}"))
        markup.row(*buttons)
    markup.add(B("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"{CBT.PLUGIN_SETTINGS}:{UUID}:0"))
    bot.edit_message_text(f"üìú <b>–ò—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤:</b>\n\n–í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: <code>{total_items}</code>", chat_id, call.message.id, reply_markup=markup, parse_mode="HTML")
    bot.answer_callback_query(call.id)

def pagination_prev(call: telebot.types.CallbackQuery, cardinal: Cardinal):
    page = int(call.data.split(":")[1])
    call.data = f"steam_order_history:{page}"
    order_history(call, cardinal)

def pagination_next(call: telebot.types.CallbackQuery, cardinal: Cardinal):
    page = int(call.data.split(":")[1])
    call.data = f"steam_order_history:{page}"
    order_history(call, cardinal)

def dummy_callback(call: telebot.types.CallbackQuery, cardinal: Cardinal):
    bot.answer_callback_query(call.id)

def order_details(call: telebot.types.CallbackQuery, cardinal: Cardinal):
    order_id, start_idx = call.data.split(":")[1], int(call.data.split(":")[2])
    chat_id = call.message.chat.id
    order = next((order for order in load_orders() if order.get("order_id") == order_id), None)
    if not order:
        bot.edit_message_text(f"‚ùå –ó–∞–∫–∞–∑ #{order_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.", chat_id, call.message.id, reply_markup=K().add(B("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="steam_order_history:1")), parse_mode="HTML")
        bot.answer_callback_query(call.id)
        return
    details_text = f"üìã <u><b>–î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞ #{order_id}:</b></u>\n\n<b>üíô FunPay:</b>\nL <b>–°—Ç–∞—Ç—É—Å:</b> <code>–£—Å–ø–µ—à–Ω–æ</code>\nL <b>–ü–æ–∫—É–ø–∞—Ç–µ–ª—å:</b> <code>{order.get('buyer_username', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}</code>\nL <b>–¶–µ–Ω–∞ –Ω–∞ FunPay:</b> <code>{order.get('sum', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')} ‚ÇΩ</code>\n\n<b>üíô Steam:</b>\nL <b>–õ–æ–≥–∏–Ω Steam:</b> <code>{order.get('steam_login', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}</code>\nL <b>–°—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:</b> <code>{format_amount(order.get('quantity', 0), order.get('currency', 'RUB'))}</code>\n\n‚Ä¢ <b>–î–∞—Ç–∞ –ø–æ–∫—É–ø–∫–∏:</b> <code>{time.strftime('%Y-%m-%d %H:%M:%S', time.localtime(order.get('timestamp', 0)))}</code>"
    page = (start_idx // 10) + 1
    markup = K(row_width=2).add(B("üíô FunPay", url=f"https://funpay.com/orders/{order_id}/"), B("üíô –ü–æ–∫—É–ø–∞—Ç–µ–ª—å", url=f"https://funpay.com/users/{order.get('buyer_id', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}/"))
    markup.add(B("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"steam_order_history:{page}"))
    bot.edit_message_text(details_text, chat_id, call.message.id, reply_markup=markup, parse_mode="HTML")
    bot.answer_callback_query(call.id)

def process_new_order(cardinal: Cardinal, message: NewMessageEvent):
    order_id = extract_order_id_from_message(message.text)
    if order_id:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ª–∏–Ω–Ω–æ—Å—Ç—å –∑–∞–∫–∞–∑–∞ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞
        if not SETTINGS["order_verification_enabled"] or verify_order_exists(cardinal, order_id):
            try:
                order = cardinal.account.get_order(order_id)
                buyer_id = order.buyer_id
                USER_ORDER_QUEUES.setdefault(buyer_id, Queue()).put({"order_id": order_id, "chat_id": message.chat_id})
                threading.Thread(target=process_user_orders, args=(cardinal, buyer_id), daemon=True).start()
                logger.info(f"{LOGGER_PREFIX} –ó–∞–∫–∞–∑ #{order_id} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å –æ–±—Ä–∞–±–æ—Ç–∫–∏ —á–µ—Ä–µ–∑ process_new_order")
            except Exception as e:
                logger.error(f"{LOGGER_PREFIX} –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–∫–∞–∑–µ #{order_id}: {e}")
        else:
            logger.warning(f"{LOGGER_PREFIX} –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –ø–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–¥–µ–ª–∫–∏ –∑–∞–∫–∞–∑–∞ #{order_id} –≤ process_new_order")
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ–ø—ã—Ç–∫–µ –ø–æ–¥–¥–µ–ª–∫–∏
            if SETTINGS["notification_types"]["error"]:
                send_notification(cardinal, order_id, "error", {
                    "message": f"<b>üîî –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –ø–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–¥–µ–ª–∫–∏ –∑–∞–∫–∞–∑–∞</b>\n\n<b>L ID –∑–∞–∫–∞–∑–∞:</b> <code>#{order_id}</code>\n<b>L –ü–æ–∫—É–ø–∞—Ç–µ–ª—å:</b> <code>–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ</code>\n<b>L –°—Ç–∞—Ç—É—Å:</b> <code>–ó–∞–∫–∞–∑ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø—Ä–æ–¥–∞–≤—Ü—É</code>\n<b>‚Ä¢ –î–∞—Ç–∞:</b> <code>{time.strftime('%Y-%m-%d %H:%M:%S', time.localtime())}</code>"
                }, parse_mode="HTML")

def process_user_orders(cardinal: Cardinal, buyer_id: int):
    if buyer_id not in USER_ORDER_QUEUES: return
    queue = USER_ORDER_QUEUES[buyer_id]
    while not queue.empty():
        order_data = queue.get()
        process_order(cardinal, order_data["order_id"], order_data["chat_id"], buyer_id)
        queue.task_done()
    del USER_ORDER_QUEUES[buyer_id]

def init(cardinal: Cardinal):
    global tg, bot, cardinal_instance, previous_balance
    tg, bot, cardinal_instance = cardinal.telegram, cardinal.telegram.bot, cardinal
    load_settings()
    threading.Thread(target=check_balance_periodically, args=(cardinal,), daemon=True).start()
    handlers = [
        (lambda c: open_settings(c, cardinal), lambda c: f"{CBT.PLUGIN_SETTINGS}:{UUID}" in c.data),
        (lambda c: show_instruction(c), lambda c: c.data == "as_instruction"),
        (lambda c: set_api(c, cardinal), lambda c: c.data == "as_set_api"),
        (lambda c: set_api_field(c, cardinal, "login"), lambda c: c.data == "as_set_api_login"),
        (lambda c: set_api_field(c, cardinal, "password"), lambda c: c.data == "as_set_api_password"),
        (lambda c: toggle_lots(c, cardinal), lambda c: c.data.startswith("as_toggle_lots_")),
        (lambda c: black_list_menu(c, cardinal), lambda c: c.data == "as_black_list"),
        (lambda c: add_to_black_list(c, cardinal), lambda c: c.data == "as_add_to_black_list"),
        (lambda c: remove_from_black_list(c, cardinal), lambda c: c.data == "as_remove_from_black_list"),
        (lambda c: remove_black_list_confirm(c, cardinal), lambda c: c.data.startswith("as_remove_black_list_confirm:")),
        (lambda c: toggle_option(c, cardinal, "auto_refund_on_error"), lambda c: c.data == "as_toggle_auto_refund"),
        (lambda c: toggle_option(c, cardinal, "notifications_enabled"), lambda c: c.data == "as_toggle_notifications"),
        (lambda c: toggle_option(c, cardinal, "order_verification_enabled"), lambda c: c.data == "as_toggle_order_verification"),
        (lambda c: refresh_info(c, cardinal), lambda c: c.data == "as_refresh_info"),
        (lambda c: order_history(c, cardinal), lambda c: c.data.startswith("steam_order_history:")),
        (lambda c: pagination_prev(c, cardinal), lambda c: c.data.startswith("steam_pagination_prev:")),
        (lambda c: pagination_next(c, cardinal), lambda c: c.data.startswith("steam_pagination_next:")),
        (lambda c: dummy_callback(c, cardinal), lambda c: c.data == "as_dummy"),
        (lambda c: order_details(c, cardinal), lambda c: c.data.startswith("steam_order_details:")),
        (lambda c: statistics(c), lambda c: c.data == "as_statistics"),
    ]
	#"\n\n‚Ä¢ –†–∞–∑—Ä–∞–±–æ—Ç–∞–Ω–æ: @gderobi"
    msg_handlers = [
        (lambda m: on_api_field(m, "login"), lambda m: tg.check_state(m.chat.id, m.from_user.id, "as_set_api_login")),
        (lambda m: on_api_field(m, "password"), lambda m: tg.check_state(m.chat.id, m.from_user.id, "as_set_api_password")),
        (on_add_to_black_list, lambda m: tg.check_state(m.chat.id, m.from_user.id, "as_add_to_black_list")),
    ]
    for handler, condition in handlers:
        tg.cbq_handler(handler, condition)
    for handler, condition in msg_handlers:
        tg.msg_handler(handler, func=condition)
    handle_new_message.plugin_uuid = UUID
    if handle_new_message not in cardinal.new_message_handlers:
        cardinal.new_message_handlers.append(handle_new_message)

BIND_TO_PRE_INIT = [init]
BIND_TO_DELETE = None